// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var C, Packet, SHA512, Signature, encode_length, make_time_packet, uint_to_buffer, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  Packet = require('./base').Packet;

  C = require('../const').openpgp;

  _ref = require('../util'), uint_to_buffer = _ref.uint_to_buffer, encode_length = _ref.encode_length, make_time_packet = _ref.make_time_packet;

  SHA512 = require('../hash').SHA512;

  Signature = (function(_super) {
    __extends(Signature, _super);

    function Signature(keymaterial, hash) {
      this.keymaterial = keymaterial;
      this.hash = hash != null ? hash : SHA512;
      this.key = this.keymaterial.key;
    }

    Signature.prototype.subpacket = function(type, buf) {
      return Buffer.concat([encode_length(buf.length + 1), new Buffer([type]), buf]);
    };

    Signature.prototype.write = function(sigtype, data, cb) {
      var dsp, hash, isp, payload, result, result2, results, ret, sig, trailer;
      dsp = this.subpacket(C.sig_subpacket.creation_time, make_time_packet());
      isp = this.subpacket(C.sig_subpacket.issuer, this.keymaterial.get_key_id());
      result = Buffer.concat([new Buffer([C.versions.signature.V4, sigtype, this.key.type, this.hash.type]), uint_to_buffer(16, dsp.length + isp.length), dsp, isp]);
      trailer = Buffer.concat([new Buffer([C.versions.signature.V4, 0xff]), uint_to_buffer(32, result.length)]);
      payload = Buffer.concat([data, result, trailer]);
      hash = this.hash(payload);
      sig = this.key.pad_and_sign(payload, {
        hash: this.hash
      });
      result2 = Buffer.concat([new Buffer([0, 0, hash.readUInt8(0), hash.readUInt8(1)]), sig]);
      results = Buffer.concat([result, result2]);
      ret = this.frame_packet(C.packet_tags.signature, results);
      return cb(null, ret);
    };

    return Signature;

  })(Packet);

  exports.Signature = Signature;

}).call(this);
