// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Processor, iced, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Processor = (function() {
    function Processor(packets) {
      this.packets = packets;
      this.verifed_signatures = [];
    }

    Processor.prototype.verify_signatures = function(cb) {
      var data_packets, err, i, key, p, primary, start, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      start = 0;
      err = null;
      key = primary = null;
      (function(__iced_k) {
        var _i, _len, _ref, _results, _while;
        _ref = _this.packets;
        _len = _ref.length;
        i = 0;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              ++i;
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!(i < _len)) {
            return _break();
          } else {
            p = _ref[i];
            if ((primary == null) && p.is_key_material()) {
              primary = p;
              key = p.key;
            }
            (function(__iced_k) {
              if (p.is_signature()) {
                p.key = key;
                p.primary = primary;
                data_packets = _this.packets.slice(start, i);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/packet/processor.iced",
                    funcname: "Processor.verify_signatures"
                  });
                  p.verify(data_packets, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return tmp = arguments[0];
                      };
                    })(),
                    lineno: 25
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  if (typeof tmp !== "undefined" && tmp !== null) {
                    console.log("Error in signature verification: " + (tmp.toString()));
                    err = tmp;
                  } else {
                    _this.verified_signatures.push(p);
                  }
                  return __iced_k(start = i + 1);
                });
              } else {
                return __iced_k();
              }
            })(_next);
          }
        };
        _while(__iced_k);
      })(function() {
        return cb(err);
      });
    };

    return Processor;

  })();

  exports.Processor = Processor;

}).call(this);
