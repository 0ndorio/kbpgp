// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var C, EdDSA, K, KeyManager, KeyManagerInterface, iced, konst, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  console.log("+ INC keymanager");

  KeyManagerInterface = require('../kmi').KeyManagerInterface;

  konst = require('../const');

  C = konst.openpgp;

  K = konst.kb;

  EdDSA = require('../nacl/eddsa').EdDSA;

  console.log("- INC keymanager");

  exports.KeyManager = KeyManager = (function(_super) {
    __extends(KeyManager, _super);

    function KeyManager(_arg) {
      this.key = _arg.key;
    }

    KeyManager.generate = function(_arg, cb) {
      var algo, err, key, params, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      algo = _arg.algo, params = _arg.params;
      algo || (algo = EdDSA);
      params || (params = {});
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/keybase/keymanager.iced",
            funcname: "KeyManager.generate"
          });
          algo.generate(params, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return key = arguments[1];
              };
            })(),
            lineno: 18
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, new KeyManager({
            key: key
          }));
        };
      })(this));
    };

    KeyManager.prototype.fetch = function(key_ids, flags, cb) {
      var err, key, mask, s;
      s = this.key.ekid().toString('hex');
      key = null;
      mask = C.key_flags.sign_data | C.key_flags.certify_keys | C.key_flags.auth;
      if ((__indexOf.call(key_ids, s) >= 0) && (flags & mask) === flags) {
        key = this.key;
      } else {
        err = new Error("Key not found");
      }
      return cb(err, key);
    };

    KeyManager.prototype.get_keypair = function() {
      return this.key;
    };

    KeyManager.prototype.eq = function(km2) {
      return this.key.eq(km2.key);
    };

    KeyManager.import_public = function(_arg, cb) {
      var err, hex, key, raw, ret, _ref;
      hex = _arg.hex, raw = _arg.raw;
      err = ret = null;
      if (hex != null) {
        raw = new Buffer(hex, 'hex');
      }
      _ref = EdDSA.parse_kb(raw), err = _ref[0], key = _ref[1];
      if (err == null) {
        ret = new KeyManager({
          key: key
        });
      }
      return cb(err, ret);
    };

    KeyManager.prototype.check_public_eq = function(km2) {
      return this.eq(km2);
    };

    KeyManager.prototype.export_public = function(_arg, cb) {
      var asp, regen, ret;
      asp = _arg.asp, regen = _arg.regen;
      ret = this.key.ekid().toString('hex');
      return cb(null, ret);
    };

    KeyManager.prototype.make_sig_eng = function() {
      var SignatureEngine;
      SignatureEngine = require('./sigeng').SignatureEngine;
      return new SignatureEngine({
        km: this
      });
    };

    return KeyManager;

  })(KeyManagerInterface);

}).call(this);
