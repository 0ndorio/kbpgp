// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var K, SHA512, alloc, pack, sign, verify, _ref;



  _ref = require('../hash'), SHA512 = _ref.SHA512, alloc = _ref.alloc;

  K = require('../const').kb;

  pack = require('./encode').pack;

  sign = function(_arg, cb) {
    var body, hasher, header, key, output, payload, progress_hook, sig, type;
    key = _arg.key, type = _arg.type, body = _arg.body, hasher = _arg.hasher, progress_hook = _arg.progress_hook;
    if (hasher == null) {
      hasher = SHA512;
    }
    header = {
      type: type,
      version: K.versions.V1,
      hasher: hasher.type,
      padding: K.padding.EMSA_PCKS1_v1_5
    };
    payload = pack({
      body: body,
      header: header
    });
    sig = key.pad_and_sign(payload, {
      hasher: hasher
    });
    output = {
      header: header,
      sig: sig
    };
    return cb(null, output);
  };

  verify = function(_arg, cb) {
    var body, err, hasher, hd, header, key, payload, progress_hook, sig, type;
    type = _arg.type, key = _arg.key, sig = _arg.sig, body = _arg.body, progress_hook = _arg.progress_hook;
    header = hd = sig.header;
    payload = pack({
      body: body,
      header: header
    });
    hasher = alloc(header.hasher);
    err = hd.version !== K.versions.V1 ? new Error("unknown version: " + header.version) : hd.padding !== K.padding.EMSA_PCKS1_v1_5 ? new Error("unknown padding: " + header.padding) : type !== hd.type ? new Error("Unexpected sig type; wanted " + type + ", got " + hd.type) : key.verify_unpad_and_check_hash(sig.sig, payload, hasher);
    return cb(err);
  };

  exports.sign = sign;

  exports.verify = verify;

}).call(this);
