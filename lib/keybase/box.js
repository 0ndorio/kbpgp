// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var C, K, Signature, akatch, alloc, asyncify, encode, iced, konst, make_esc, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  console.log("+ INC box");

  encode = require('./encode');

  _ref = require('../util'), asyncify = _ref.asyncify, akatch = _ref.akatch;

  make_esc = require('iced-error').make_esc;

  konst = require('../const');

  alloc = require('./packet/alloc').alloc;

  Signature = require('./packet/signature').Signature;

  K = konst.kb;

  C = konst.openpgp;

  console.log("- INC box");

  exports.unbox = function(_arg, cb) {
    var armored, buf, esc, packet, rawobj, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    armored = _arg.armored, rawobj = _arg.rawobj;
    esc = make_esc(cb, "unbox");
    (function(_this) {
      return (function(__iced_k) {
        if ((armored == null) && (rawobj == null)) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/keybase/box.iced",
              funcname: "unbox"
            });
            athrow(new Error("need either 'armored' or 'rawobj'"), esc(__iced_deferrals.defer({
              lineno: 20
            })));
            __iced_deferrals._fulfill();
          })(__iced_k);
        } else {
          return __iced_k();
        }
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          if (armored != null) {
            buf = new Buffer(armored, 'base64');
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/keybase/box.iced",
                funcname: "unbox"
              });
              akatch((function() {
                return encode.unseal(buf);
              }), esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return rawobj = arguments[0];
                  };
                })(),
                lineno: 24
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/keybase/box.iced",
              funcname: "unbox"
            });
            asyncify(alloc(rawobj), esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return packet = arguments[0];
                };
              })(),
              lineno: 26
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/keybase/box.iced",
                funcname: "unbox"
              });
              packet.unbox(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return res = arguments[0];
                  };
                })(),
                lineno: 27
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, res);
            });
          });
        });
      };
    })(this));
  };

  exports.box = function(_arg, cb) {
    var armored, esc, msg, packed, packet, sealed, sign_with, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    msg = _arg.msg, sign_with = _arg.sign_with;
    esc = make_esc(cb, "box");
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/keybase/box.iced",
          funcname: "box"
        });
        Signature.box({
          km: sign_with,
          payload: msg
        }, esc(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return packet = arguments[0];
            };
          })(),
          lineno: 35
        })));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        packed = packet.frame_packet();
        sealed = encode.seal({
          obj: packed,
          dohash: false
        });
        armored = sealed.toString('base64');
        return cb(null, armored);
      };
    })(this));
  };

}).call(this);
