// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var SignatureEngine, box, iced, make_esc, unbox, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  console.log("+ INC sigeng");

  make_esc = require('iced-error').make_esc;

  _ref = require('./box'), box = _ref.box, unbox = _ref.unbox;

  console.log(require('./box'));

  console.log("- INC sigeng");

  exports.SignatureEngine = SignatureEngine = (function() {
    function SignatureEngine(_arg) {
      this.km = _arg.km;
    }

    SignatureEngine.prototype.get_km = function() {
      return this.km;
    };

    SignatureEngine.prototype.box = function(msg, cb) {
      var armored, esc, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SignatureEngine::box");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/keybase/sigeng.iced",
            funcname: "SignatureEngine.box"
          });
          box({
            msg: msg,
            sign_with: _this.km
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return armored = arguments[0];
              };
            })(),
            lineno: 20
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          out = {
            type: "kb",
            armored: armored,
            kb: armored
          };
          return cb(null, out);
        };
      })(this));
    };

    SignatureEngine.prototype.unbox = function(msg, cb) {
      var a, b, err, esc, payload, res, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "SignatureEngine::unbox");
      err = payload = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/keybase/sigeng.iced",
            funcname: "SignatureEngine.unbox"
          });
          unbox({
            armored: msg
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return res = arguments[0];
              };
            })(),
            lineno: 29
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!res.km.eq(_this.km)) {
            a = res.km.get_ekid().toString('hex');
            b = _this.km.get_ekid().toString('hex');
            err = new Error("Got wrong signing key: " + a + " != " + b);
          } else {
            payload = res.payload;
          }
          return cb(null, payload);
        };
      })(this));
    };

    return SignatureEngine;

  })();

}).call(this);
