// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var K, KeyMaterial, Packet, SHA512, box, bufferify, iced, make_esc, native_rng, pack, rsa, sign, triplesec, verify, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  K = require('../../const').kb;

  triplesec = require('triplesec');

  SHA512 = require('../../hash').SHA512;

  native_rng = triplesec.prng.native_rng;

  Packet = require('./base').Packet;

  _ref = require('../encode'), pack = _ref.pack, box = _ref.box;

  make_esc = require('iced-error').make_esc;

  rsa = require('../../rsa');

  _ref1 = require('../sign'), sign = _ref1.sign, verify = _ref1.verify;

  bufferify = require('../../util').bufferify;

  KeyMaterial = (function(_super) {
    __extends(KeyMaterial, _super);

    function KeyMaterial(_arg) {
      this.key = _arg.key, this.timestamp = _arg.timestamp, this.rawkey = _arg.rawkey;
      KeyMaterial.__super__.constructor.call(this);
    }

    KeyMaterial.prototype.export_public = function() {
      var pub;
      pub = this.key.pub.serialize();
      return {
        type: this.key.type,
        pub: pub,
        timestamp: this.timestamp
      };
    };

    KeyMaterial.prototype.export_private = function(_arg, cb) {
      var asp, epriv, err, priv, ret, tsenc, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      tsenc = _arg.tsenc, asp = _arg.asp;
      ret = this.export_public();
      priv = this.key.priv.serialize();
      (function(__iced_k) {
        if (tsenc != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/keybase/packet/keymaterial.iced",
              funcname: "KeyMaterial.export_private"
            });
            tsenc.run({
              data: priv,
              progress_hook: asp != null ? asp.progress_hook() : void 0
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return epriv = arguments[1];
                };
              })(),
              lineno: 31
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(typeof err !== "undefined" && err !== null ? ret = null : ret.priv = {
              data: epriv,
              encryption: K.key_encryption.triplesec_v2
            });
          });
        } else {
          return __iced_k(ret.priv = {
            data: priv,
            encryption: K.key_encryption.none
          });
        }
      })(function() {
        return cb(err, ret);
      });
    };

    KeyMaterial.alloc = function(secret_tag, o) {
      var e, err, ret;
      ret = null;
      try {
        ret = new KeyMaterial({
          timestamp: o.key.timestamp,
          rawkey: {
            type: o.key.type,
            pub: o.key.pub,
            priv: o.key.priv
          }
        });
        if (secret_tag && (ret.rawkey.priv == null)) {
          throw new Error("didn't a private key");
        }
      } catch (_error) {
        e = _error;
        err = e;
      }
      return [err, ret];
    };

    KeyMaterial.prototype.alloc_public_key = function(_arg, cb) {
      var err, progress_hook, _ref2;
      progress_hook = _arg.progress_hook;
      switch (this.rawkey.type) {
        case K.public_key_algorithms.RSA:
          _ref2 = rsa.RSA.alloc({
            pub: this.rawkey.pub
          }), err = _ref2[0], this.key = _ref2[1];
          break;
        default:
          err = new Error("unknown key type: " + this.rawkey.type);
      }
      return cb(err);
    };

    KeyMaterial.prototype.verify_self_sig = function(_arg, cb) {
      var body, err, progress_hook, type, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      progress_hook = _arg.progress_hook;
      body = this._self_sign_body();
      type = K.signatures.self_sign_key_keybase_username;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/keybase/packet/keymaterial.iced",
          funcname: "KeyMaterial.verify_self_sig"
        });
        verify({
          key: _this.key,
          sig: _this.sig,
          body: body,
          type: type,
          progress_hook: progress_hook
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 76
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    KeyMaterial.prototype.unlock_private_key = function(_arg, cb) {
      var err, k, passphrase, progress_hook, raw, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      passphrase = _arg.passphrase, progress_hook = _arg.progress_hook;
      err = null;
      (function(__iced_k) {
        if ((k = _this.rawkey.priv) != null) {
          (function(__iced_k) {
            switch (k.encryption) {
              case K.key_encryption.triplesec_v1:
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/keybase/packet/keymaterial.iced",
                    funcname: "KeyMaterial.unlock_private_key"
                  });
                  triplesec.decrypt({
                    key: passphrase,
                    data: k.data
                  }, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return raw = arguments[1];
                      };
                    })(),
                    lineno: 86
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
                break;
              case K.key_encryption.none:
                return __iced_k(raw = k.data);
              default:
                return __iced_k(err = new Error("Unknown key encryption type: " + k.encryption));
            }
          })(function() {
            return __iced_k(err == null ? err = _this.key.read_priv(raw) : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    KeyMaterial.prototype.open = function(_arg, cb) {
      var err, esc, passphrase, progress_hook, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      passphrase = _arg.passphrase, progress_hook = _arg.progress_hook;
      passphrase = bufferify(passphrase);
      esc = make_esc(cb, "KeyMaterial::esc");
      err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/keybase/packet/keymaterial.iced",
          funcname: "KeyMaterial.open"
        });
        _this.alloc_public_key({
          progress_hook: progress_hook
        }, esc(__iced_deferrals.defer({
          lineno: 105
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/keybase/packet/keymaterial.iced",
            funcname: "KeyMaterial.open"
          });
          _this.verify_self_sig({
            progress_hook: progress_hook
          }, esc(__iced_deferrals.defer({
            lineno: 106
          })));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/keybase/packet/keymaterial.iced",
              funcname: "KeyMaterial.open"
            });
            _this.unlock_private_key({
              passphrase: passphrase,
              progress_hook: progress_hook
            }, esc(__iced_deferrals.defer({
              lineno: 107
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(err);
          });
        });
      });
    };

    return KeyMaterial;

  })(Packet);

  exports.KeyMaterial = KeyMaterial;

}).call(this);
