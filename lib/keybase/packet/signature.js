// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Base, K, Packet, SelfSignKeybaseUsername, SelfSignPgpUserid, SubkeyReverseSignature, SubkeySignature, iced, sign, verfiy, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  Base = require('./base').Base;

  K = require('../../const').kb;

  _ref = require('../sign'), sign = _ref.sign, verfiy = _ref.verfiy;

  Packet = require('./base').Packet;

  Base = (function(_super) {
    __extends(Base, _super);

    function Base(_arg) {
      this.type = _arg.type, this.key = _arg.key;
      this.sig = null;
    }

    Base.prototype.sign = function(_arg, cb) {
      var asp, body, err, include_body, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      asp = _arg.asp, include_body = _arg.include_body;
      body = this._v_body();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/keybase/packet/signature.iced",
          funcname: "Base.sign"
        });
        sign({
          key: _this.key,
          type: _this.type,
          body: body,
          include_body: include_body
        }, __iced_deferrals.defer({
          assign_fn: (function(__slot_1) {
            return function() {
              err = arguments[0];
              return __slot_1.sig = arguments[1];
            };
          })(_this),
          lineno: 16
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, _this.sig);
      });
    };

    Base.prototype.frame_packet = function() {
      return Base.__super__.frame_packet.call(this, K.packet_tags.signature, this.sig);
    };

    return Base;

  })(Packet);

  SelfSignPgpUserid = (function(_super) {
    __extends(SelfSignPgpUserid, _super);

    function SelfSignPgpUserid(_arg) {
      this.key_wrapper = _arg.key_wrapper, this.userids = _arg.userids;
      SelfSignPgpUserid.__super__.constructor.call(this, {
        type: K.sig_types.self_sign_pgp_userid,
        key: this.key_wrapper.key
      });
    }

    SelfSignPgpUserid.prototype._v_body = function() {
      return {
        ekid: this.key_wrapper.key.ekid(),
        generated: this.key_wrapper.lifespan.generated,
        expire_in: this.key_wrapper.lifespan.expire_in,
        username: this.userids.get_openpgp()
      };
    };

    return SelfSignPgpUserid;

  })(Base);

  SelfSignKeybaseUsername = (function(_super) {
    __extends(SelfSignKeybaseUsername, _super);

    function SelfSignKeybaseUsername(_arg) {
      this.key_wrapper = _arg.key_wrapper, this.userids = _arg.userids;
      SelfSignKeybaseUsername.__super__.constructor.call(this, {
        type: K.sig_types.self_sign_keybase_username,
        key: this.key_wrapper.key
      });
    }

    SelfSignKeybaseUsername.prototype._v_body = function() {
      return {
        ekid: this.key_wrapper.key.ekid(),
        generated: this.key_wrapper.lifespan.generated,
        expire_in: this.key_wrapper.lifespan.expire_in,
        username: this.userids.get_keybase()
      };
    };

    return SelfSignKeybaseUsername;

  })(Base);

  SubkeySignature = (function(_super) {
    __extends(SubkeySignature, _super);

    function SubkeySignature(_arg) {
      this.subkey = _arg.subkey;
      SubkeySignature.__super__.constructor.call(this, {
        type: K.sig_types.subkey,
        key: this.subkey.primary.key
      });
    }

    SubkeySignature.prototype._v_body = function() {
      return {
        primary_ekid: this.subkey.primary.ekid(),
        subkey_ekid: this.subkey.ekid(),
        generated: this.subkey.lifespan.generated,
        expire_in: this.subkey.lifespan.expire_in
      };
    };

    return SubkeySignature;

  })(Base);

  SubkeyReverseSignature = (function(_super) {
    __extends(SubkeyReverseSignature, _super);

    function SubkeyReverseSignature(_arg) {
      this.subkey = _arg.subkey;
      SubkeyReverseSignature.__super__.constructor.call(this, {
        type: K.sig_types.subkey_reverse,
        key: this.subkey.key
      });
    }

    SubkeyReverseSignature.prototype._v_body = function() {
      return {
        primary_ekid: this.subkey.primary.ekid(),
        subkey_ekid: this.subkey.ekid(),
        generated: this.subkey.lifespan.generated,
        expire_in: this.subkey.lifespan.expire_in
      };
    };

    return SubkeyReverseSignature;

  })(Base);

  exports.SelfSignPgpUserid = SelfSignPgpUserid;

  exports.SelfSignKeybaseUsername = SelfSignKeybaseUsername;

  exports.SubkeySignature = SubkeySignature;

  exports.SubkeyReverseSignature = SubkeyReverseSignature;

}).call(this);
