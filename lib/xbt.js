// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var Base, Chain, Demux, Gets, InBlocker, Passthrough, ReverseAdapter, SimpleInit, StreamAdapter, assert, buf_indices_of, bufcat, iced, make_esc, stream, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  stream = require('stream');

  make_esc = require('iced-error').make_esc;

  assert = require('assert');

  _ref = require('./util'), buf_indices_of = _ref.buf_indices_of, bufcat = _ref.bufcat;

  Base = (function() {
    function Base() {
      this._parent = null;
      this._metadata = {};
    }

    Base.prototype.chunk = function(_arg, cb) {
      var data, eof;
      data = _arg.data, eof = _arg.eof;
      return cb(new Error("unimplemented!"));
    };

    Base.prototype.set_parent = function(p) {
      return this._parent = p;
    };

    Base.prototype.get_parent = function() {
      return this._parent;
    };

    Base.prototype.get_metadata = function() {
      return this._metadata;
    };

    Base.prototype.get_root_metadata = function(slice, def) {
      var md, _ref1;
      def || (def = {});
      md = ((_ref1 = this.root()) != null ? _ref1.get_metadata() : void 0) || {};
      if (slice != null) {
        return md[slice] || (md[slice] = def);
      } else {
        return md;
      }
    };

    Base.prototype.root = function() {
      var p;
      p = this.get_parent();
      if (p == null) {
        return this;
      } else {
        return p.root();
      }
    };

    return Base;

  })();

  Passthrough = (function(_super) {
    __extends(Passthrough, _super);

    function Passthrough() {
      return Passthrough.__super__.constructor.apply(this, arguments);
    }

    Passthrough.prototype.chunk = function(_arg, cb) {
      var data, eof;
      data = _arg.data, eof = _arg.eof;
      return cb(null, data);
    };

    return Passthrough;

  })(Base);

  Chain = (function(_super) {
    __extends(Chain, _super);

    function Chain() {
      this.links = [];
    }

    Chain.prototype.push_xbt = function(link) {
      this.links.push(link);
      link.set_parent(this);
      return this;
    };

    Chain.prototype.chunk = function(_arg, cb) {
      var data, eof, esc, l, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "Chain::chunk");
      out = null;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref1, _results, _while;
          _ref1 = _this.links;
          _len = _ref1.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              l = _ref1[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "Chain.chunk"
                });
                l.chunk({
                  data: data,
                  eof: eof
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return data = arguments[0];
                    };
                  })(),
                  lineno: 62
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(out = data);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, out);
        };
      })(this));
    };

    return Chain;

  })(Base);

  SimpleInit = (function(_super) {
    __extends(SimpleInit, _super);

    function SimpleInit() {
      this._did_init = false;
    }

    SimpleInit.prototype.init = function(cb) {
      var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = data = null;
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._did_init) {
            _this._did_init = true;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "SimpleInit.init"
              });
              _this._v_init(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return data = arguments[1];
                  };
                })(),
                lineno: 77
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, data);
        };
      })(this));
    };

    SimpleInit.prototype.chunk = function(_arg, cb) {
      var data, eof, esc, init_data, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "SimpleInit::chunk");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "SimpleInit.chunk"
          });
          _this.init(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return init_data = arguments[0];
              };
            })(),
            lineno: 82
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
              funcname: "SimpleInit.chunk"
            });
            _this._v_chunk({
              data: data,
              eof: eof
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return out = arguments[0];
                };
              })(),
              lineno: 83
            })));
            __iced_deferrals._fulfill();
          })(function() {
            out = bufcat([init_data, out]);
            return cb(null, out);
          });
        };
      })(this));
    };

    return SimpleInit;

  })(Base);

  InBlocker = (function(_super) {
    __extends(InBlocker, _super);

    function InBlocker(block_size) {
      this.block_size = block_size;
      InBlocker.__super__.constructor.call(this);
      this._buffers = [];
      this._dlen = 0;
      this._p = 0;
      this._input_len = 0;
    }

    InBlocker.prototype._push_data = function(b) {
      if (b != null ? b.length : void 0) {
        this._buffers.push(b);
        return this._dlen += b.length;
      }
    };

    InBlocker.prototype._pop_block = function(block_size) {
      var b, end, getbuf, i, leftover, out, slices, start, stuff, total, _i, _len, _ref1;
      total = 0;
      slices = [];
      block_size || (block_size = this.block_size);
      getbuf = function(buf, start, end) {
        if (!start && (end == null)) {
          return buf;
        } else if (end == null) {
          return buf.slice(start);
        } else {
          return buf.slice(start, end);
        }
      };
      _ref1 = this._buffers;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        b = _ref1[i];
        start = i === 0 ? this._p : 0;
        stuff = b.length - start;
        leftover = total + stuff - block_size;
        if (leftover < 0) {
          slices.push(getbuf(b, start));
          total += stuff;
        } else if (leftover === 0) {
          slices.push(getbuf(b, start));
          total += stuff;
          this._buffers = this._buffers.slice(i + 1);
          this._p = 0;
          break;
        } else {
          end = b.length - leftover;
          slices.push(getbuf(b, start, end));
          this._buffers = this._buffers.slice(i);
          this._p = end;
          break;
        }
      }
      out = Buffer.concat(slices);
      assert(out.length === block_size);
      return out;
    };

    InBlocker.prototype._v_chunk = function(_arg, cb) {
      var data, eof, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      if (data != null) {
        this._input_len += data.length;
      }
      this._push_data(data);
      err = out = null;
      (function(_this) {
        return (function(__iced_k) {
          if (eof) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "InBlocker._v_chunk"
              });
              _this._handle_eof(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return out = arguments[1];
                  };
                })(),
                lineno: 149
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              if (_this._dlen >= _this.block_size) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                    funcname: "InBlocker._v_chunk"
                  });
                  _this._handle_block(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return out = arguments[1];
                      };
                    })(),
                    lineno: 151
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    InBlocker.prototype._handle_eof = function(cb) {
      var buf, bufs, data, end, eof, esc, i, out, outbufs, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "InBlocker::_v_chunk");
      i = 0;
      outbufs = [];
      bufs = [];
      if (this._buffers.length && this._p > 0) {
        bufs.push(this._buffers.shift().slice(this._p));
      }
      bufs = bufs.concat(this._buffers);
      buf = Buffer.concat(bufs);
      this._buffers = [];
      this._dlen = 0;
      this._p = 0;
      eof = false;
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!!eof) {
              return _break();
            } else {
              end = i + _this.block_size;
              eof = end >= buf.length;
              data = buf.slice(i, end);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "InBlocker._handle_eof"
                });
                _this._v_inblock_chunk({
                  data: data,
                  eof: eof
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return out = arguments[0];
                    };
                  })(),
                  lineno: 181
                })));
                __iced_deferrals._fulfill();
              })(function() {
                outbufs.push(out);
                return _next(i = end);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          out = Buffer.concat(outbufs);
          return cb(null, out);
        };
      })(this));
    };

    InBlocker.prototype._handle_block = function(cb) {
      var data, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = this._pop_block();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "InBlocker._handle_block"
          });
          _this._v_inblock_chunk({
            data: data,
            eof: false
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 192
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    return InBlocker;

  })(SimpleInit);

  Demux = (function(_super) {
    __extends(Demux, _super);

    function Demux() {
      this._buffers = [];
      this._dlen = 0;
      this._sink = null;
      Demux.__super__.constructor.call(this);
    }

    Demux.prototype.chunk = function(_arg, cb) {
      var data, eof, err, out, pb, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      err = out = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this._sink == null) {
            if (data != null) {
              _this._buffers.push(data);
              _this._dlen += data.length;
            }
            (function(__iced_k) {
              if (_this._dlen >= (pb = _this.peek_bytes())) {
                data = Buffer.concat(_this._buffers);
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                    funcname: "Demux.chunk"
                  });
                  _this._demux({
                    data: data,
                    eof: eof
                  }, __iced_deferrals.defer({
                    assign_fn: (function(__slot_1) {
                      return function() {
                        err = arguments[0];
                        __slot_1._sink = arguments[1];
                        return data = arguments[2];
                      };
                    })(_this),
                    lineno: 220
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  var _ref1;
                  return __iced_k((_ref1 = _this._sink) != null ? _ref1.set_parent(_this) : void 0);
                });
              } else {
                return __iced_k(eof ? (err = new Error("EOF before " + pb + " bytes"), data = null) : void 0);
              }
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this._sink != null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "Demux.chunk"
                });
                _this._sink.chunk({
                  data: data,
                  eof: eof
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return out = arguments[1];
                    };
                  })(),
                  lineno: 228
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(err, out);
          });
        };
      })(this));
    };

    return Demux;

  })(Base);

  Gets = (function(_super) {
    __extends(Gets, _super);

    function Gets(_arg) {
      var maxline, mod;
      maxline = _arg.maxline, mod = _arg.mod;
      this._maxline = maxline;
      this._mod = mod || 4;
      this._buffers = [];
      this._dlen = 0;
      this._dummy_mode = false;
      this._lineno = 0;
      Gets.__super__.constructor.call(this);
    }

    Gets.prototype.chunk = function(_arg, cb) {
      var buf, chunk, data, eof, err, esc, index, line, outbufs, prev, rest, retlen, start, tmp, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      err = null;
      outbufs = [];
      esc = make_esc(cb, "Gets::chunk");
      (function(_this) {
        return (function(__iced_k) {
          if ((data != null) && (v = buf_indices_of(data, "\n".charCodeAt(0))).length) {
            prev = Buffer.concat(_this._buffers);
            _this._buffers = [];
            _this._dlen = 0;
            start = 0;
            (function(__iced_k) {
              var _i, _len, _ref1, _results, _while;
              _ref1 = v;
              _len = _ref1.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  index = _ref1[_i];
                  line = bufcat([prev, data.slice(start, index)]);
                  _this._lineno++;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                      funcname: "Gets.chunk"
                    });
                    _this._v_line_chunk({
                      data: line,
                      newline: true,
                      eof: false
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return tmp = arguments[0];
                        };
                      })(),
                      lineno: 262
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    outbufs.push(tmp);
                    start = index + 1;
                    return _next(prev = null);
                  });
                }
              };
              _while(__iced_k);
            })(function() {
              rest = data.slice(start);
              _this._buffers = [rest];
              return __iced_k(_this._dlen = rest.length);
            });
          } else {
            (function(__iced_k) {
              if ((data != null) || eof) {
                _this._buffers.push(data);
                _this._dlen += data.length;
                chunk = null;
                if (_this._maxline && (_this._dlen > _this._maxline)) {
                  buf = Buffer.concat(_this._buffers);
                  retlen = Math.floor(_this._dlen / _this._mod) * _this._mod;
                  chunk = buf.slice(0, retlen);
                  rest = buf.slice(retlen);
                  _this._buffers = [rest];
                  _this._dlen = rest.length;
                }
                (function(__iced_k) {
                  if ((chunk != null) || eof) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                        funcname: "Gets.chunk"
                      });
                      _this._v_line_chunk({
                        data: chunk,
                        newline: false,
                        eof: eof
                      }, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return tmp = arguments[0];
                          };
                        })(),
                        lineno: 282
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return __iced_k(outbufs.push(tmp));
                    });
                  } else {
                    return __iced_k();
                  }
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, bufcat(outbufs));
        };
      })(this));
    };

    return Gets;

  })(Base);

  StreamAdapter = (function(_super) {
    __extends(StreamAdapter, _super);

    function StreamAdapter(_arg) {
      this.xbt = _arg.xbt;
      StreamAdapter.__super__.constructor.call(this);
    }

    StreamAdapter.prototype._transform = function(data, encoding, cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (typeof endcoding !== "undefined" && endcoding !== null) {
        data = new Buffer(data, encoding);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "StreamAdapter._transform"
          });
          _this.xbt.chunk({
            eof: false,
            data: data
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 296
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!(typeof err !== "undefined" && err !== null) && (typeof out !== "undefined" && out !== null)) {
            _this.push(out);
          }
          return cb(err);
        };
      })(this));
    };

    StreamAdapter.prototype._flush = function(cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "StreamAdapter._flush"
          });
          _this.xbt.chunk({
            eof: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 301
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!(typeof err !== "undefined" && err !== null) && (typeof out !== "undefined" && out !== null)) {
            _this.push(out);
          }
          return cb(err);
        };
      })(this));
    };

    return StreamAdapter;

  })(stream.Transform);

  ReverseAdapter = (function(_super) {
    __extends(ReverseAdapter, _super);

    function ReverseAdapter(_arg) {
      var hiwat;
      this.stream = _arg.stream, hiwat = _arg.hiwat;
      ReverseAdapter.__super__.constructor.call(this);
      this._buffers = [];
      this._dlen = 0;
      this._hiwat = hiwat || 0x10000;
    }

    ReverseAdapter.prototype._push_data = function(data) {
      if ((data != null) && data.length) {
        this._buffers.push(data);
        this._dlen += data.length;
        return true;
      } else {
        return false;
      }
    };

    ReverseAdapter.prototype._transform = function(data, cb) {
      var diff, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "ReverseAdapter._transform"
          });
          _this.stream.write(data, __iced_deferrals.defer({
            lineno: 325
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          while ((diff = _this._hiwat - _this._dlen) > 0) {
            if (!_this._push_data(_this.stream.read(diff))) {
              break;
            }
          }
          return cb();
        };
      })(this));
    };

    ReverseAdapter.prototype._flush = function(cb) {
      this.stream.end();
      this.stream.on('data', (function(_this) {
        return function(data) {
          return _this._push_data(data);
        };
      })(this));
      this.stream.once('error', function(err) {
        return cb(err);
      });
      return this.stream.once('end', function(data) {
        return cb(null);
      });
    };

    ReverseAdapter.prototype._consume_bufs = function() {
      var out;
      out = Buffer.concat(this._buffers);
      this._buffers = [];
      this._dlen = 0;
      return out;
    };

    ReverseAdapter.prototype.chunk = function(_arg, cb) {
      var data, eof, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "ReverseAdapter::chunk");
      (function(_this) {
        return (function(__iced_k) {
          if (data != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "ReverseAdapter.chunk"
              });
              _this._transform(data, esc(__iced_deferrals.defer({
                lineno: 344
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (eof) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "ReverseAdapter.chunk"
                });
                _this._flush(esc(__iced_deferrals.defer({
                  lineno: 345
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb(null, _this._consume_bufs());
          });
        };
      })(this));
    };

    return ReverseAdapter;

  })(Base);

  exports.Base = Base;

  exports.Chain = Chain;

  exports.SimpleInit = SimpleInit;

  exports.StreamAdapter = StreamAdapter;

  exports.ReverseAdapter = ReverseAdapter;

  exports.InBlocker = InBlocker;

  exports.Demux = Demux;

  exports.Passthrough = Passthrough;

  exports.Gets = Gets;

}).call(this);
