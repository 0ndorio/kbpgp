// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var Base, Chain, DEBUG, Demux, Gets, InBlocker, Lock, Passthrough, Queue, ReadBufferer, ReverseAdapter, SimpleInit, StreamAdapter, Waitpoint, assert, buf_indices_of, bufcat, iced, make_esc, stream, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  stream = require('stream');

  make_esc = require('iced-error').make_esc;

  assert = require('assert');

  _ref = require('./util'), buf_indices_of = _ref.buf_indices_of, bufcat = _ref.bufcat;

  Lock = require('./lock').Lock;

  DEBUG = 1;

  Base = (function() {
    Base.OBJ_ID = 0;

    function Base() {
      this._parent = null;
      this._metadata = {};
      this._hashers = [];
      this._obj_id = Base.OBJ_ID++;
      this._debug = 0;
    }

    Base.prototype.chunk = function(_arg, cb) {
      var data, eof;
      data = _arg.data, eof = _arg.eof;
      return cb(new Error("unimplemented!"));
    };

    Base.prototype.set_parent = function(p) {
      return this._parent = p;
    };

    Base.prototype.get_parent = function() {
      return this._parent;
    };

    Base.prototype.get_metadata = function() {
      return this._metadata;
    };

    Base.prototype.get_root_metadata = function(slice, def) {
      var md, _ref1;
      def || (def = {});
      md = ((_ref1 = this.get_root()) != null ? _ref1.get_metadata() : void 0) || {};
      if (slice != null) {
        return md[slice] || (md[slice] = def);
      } else {
        return md;
      }
    };

    Base.prototype.set_root_metadata = function(_arg, cb) {
      var err, rmd, slice, value;
      slice = _arg.slice, value = _arg.value;
      rmd = this.get_root_metadata();
      err = null;
      if (rmd[slice] != null) {
        err = new Error("Cannot have >1 '" + slice + "' packets");
      } else {
        rmd[slice] = value;
      }
      return cb(err);
    };

    Base.prototype.get_root = function() {
      var p;
      p = this.get_parent();
      if (p == null) {
        return this;
      } else {
        return p.get_root();
      }
    };

    Base.prototype.push_hasher = function(h) {
      return this._hashers.push(h);
    };

    Base.prototype.pop_hasher = function(h) {
      return this._hashers.pop();
    };

    Base.prototype.hashers = function() {
      return this._hashers;
    };

    Base.prototype._get_debug_info = function() {
      var di, p;
      if (this._debug_info == null) {
        this._debug_info = !DEBUG ? {} : (p = this.get_parent()) == null ? this._debug ? {
          level: 0,
          debug: this._debug
        } : {} : ((di = p._get_debug_info()) != null) && di.debug ? {
          level: di.level + 1,
          debug: di.debug
        } : {};
      }
      return this._debug_info;
    };

    Base.prototype.set_debug = function(d) {
      return this.get_root()._debug = d;
    };

    Base.prototype._debug_prefix = function(c) {
      return ((function() {
        var _i, _ref1, _results;
        _results = [];
        for (_i = 0, _ref1 = this._get_debug_info().level; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 0 <= _ref1 ? _i++ : _i--) {
          _results.push(c);
        }
        return _results;
      }).call(this)).join('');
    };

    Base.prototype._debug_buffer = function(b) {
      var col, dat, di, hex;
      if (!(di = this._get_debug_info()).debug) {
        return null;
      } else if (b != null) {
        hex = b.toString('hex');
        col = 80;
        dat = di.debug === 1 ? hex.slice(0, col) + (hex.length > col ? "..." : '') : hex;
        return "[" + b.length + "]{" + dat + "}";
      } else {
        return "[]";
      }
    };

    Base.prototype._chunk_debug_pre = function(_arg) {
      var data, di, eof, prfx;
      data = _arg.data, eof = _arg.eof;
      if ((di = this._get_debug_info()).debug) {
        prfx = this._debug_prefix("+");
        return this._chunk_debug_msg(prfx, "eof=" + eof + ": " + (this._debug_buffer(data)));
      }
    };

    Base.prototype._chunk_debug_post = function(_arg) {
      var data, di, err, msg_parts, prfx;
      err = _arg.err, data = _arg.data;
      if ((di = this._get_debug_info()).debug) {
        prfx = this._debug_prefix("-");
        msg_parts = [];
        if (err != null) {
          msg_parts.push("ERR=(" + (err != null ? err.message : void 0) + ")");
        }
        msg_parts.push(this._debug_buffer(data));
        return this._chunk_debug_msg(prfx, msg_parts.join(": "));
      }
    };

    Base.prototype._chunk_debug_msg = function(pre, post) {
      return console.log([pre, "" + (this.xbt_type()) + "#" + this._obj_id, post].join(' '));
    };

    Base.prototype._debug_msg = function(c, msg) {
      var di, prfx;
      if ((di = this._get_debug_info()).debug) {
        prfx = this._debug_prefix(c);
        return console.log([prfx, msg].join(" "));
      }
    };

    return Base;

  })();

  Passthrough = (function(_super) {
    __extends(Passthrough, _super);

    function Passthrough(args) {
      Passthrough.__super__.constructor.call(this, args);
    }

    Passthrough.prototype.xbt_type = function() {
      return "Passthrough";
    };

    Passthrough.prototype.chunk = function(_arg, cb) {
      var data, eof;
      data = _arg.data, eof = _arg.eof;
      this._chunk_debug_pre({
        data: data,
        eof: eof
      });
      return cb(null, data);
    };

    return Passthrough;

  })(Base);

  Chain = (function(_super) {
    __extends(Chain, _super);

    function Chain(links) {
      var l, _i, _len;
      if (links == null) {
        links = [];
      }
      this.links = links;
      for (_i = 0, _len = links.length; _i < _len; _i++) {
        l = links[_i];
        l.set_parent(this);
      }
      Chain.__super__.constructor.call(this);
      this._iters = 0;
    }

    Chain.prototype.xbt_type = function() {
      return "Chain";
    };

    Chain.prototype.push_xbt = function(link) {
      this.links.push(link);
      link.set_parent(this);
      return this;
    };

    Chain.prototype.chunk = function(_arg, cb) {
      var data, eof, esc, i, l, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "Chain::chunk");
      out = null;
      this._chunk_debug_pre({
        data: data,
        eof: eof
      });
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref1, _results, _while;
          _ref1 = _this.links;
          _len = _ref1.length;
          i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(i < _len)) {
              return _break();
            } else {
              l = _ref1[i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "Chain.chunk"
                });
                l.chunk({
                  data: data,
                  eof: eof
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return data = arguments[0];
                    };
                  })(),
                  lineno: 165
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(out = data);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          _this._chunk_debug_post({
            err: null,
            data: out
          });
          return cb(null, out);
        };
      })(this));
    };

    return Chain;

  })(Base);

  SimpleInit = (function(_super) {
    __extends(SimpleInit, _super);

    function SimpleInit() {
      this._did_init = false;
      SimpleInit.__super__.constructor.call(this);
    }

    SimpleInit.prototype.xbt_type = function() {
      return "SimpleInit";
    };

    SimpleInit.prototype.init = function(cb) {
      var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = data = null;
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._did_init) {
            _this._did_init = true;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "SimpleInit.init"
              });
              _this._v_init(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return data = arguments[1];
                  };
                })(),
                lineno: 184
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, data);
        };
      })(this));
    };

    SimpleInit.prototype.chunk = function(_arg, cb) {
      var data, eof, esc, init_data, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      this._chunk_debug_pre({
        data: data,
        eof: eof
      });
      esc = make_esc(cb, "SimpleInit::chunk");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "SimpleInit.chunk"
          });
          _this.init(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return init_data = arguments[0];
              };
            })(),
            lineno: 190
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
              funcname: "SimpleInit.chunk"
            });
            _this._v_chunk({
              data: data,
              eof: eof
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return out = arguments[0];
                };
              })(),
              lineno: 191
            })));
            __iced_deferrals._fulfill();
          })(function() {
            out = bufcat([init_data, out]);
            _this._chunk_debug_post({
              err: null,
              data: out
            });
            return cb(null, out);
          });
        };
      })(this));
    };

    return SimpleInit;

  })(Base);

  InBlocker = (function(_super) {
    __extends(InBlocker, _super);

    function InBlocker(block_size) {
      this.block_size = block_size;
      InBlocker.__super__.constructor.call(this);
      this._inq = new Queue();
      this._input_len = 0;
    }

    InBlocker.prototype.xbt_type = function() {
      return "InBlocker";
    };

    InBlocker.prototype._push_data = function(b) {
      return this._inq.push(b);
    };

    InBlocker.prototype._pop_block = function() {
      return this._inq.pull(this.block_size);
    };

    InBlocker.prototype._v_chunk = function(_arg, cb) {
      var buf, data, eof, err, out, outbufs, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      this._chunk_debug_pre({
        data: data,
        eof: eof
      });
      if (data != null) {
        this._input_len += data.length;
      }
      this._push_data(data);
      err = out = null;
      (function(_this) {
        return (function(__iced_k) {
          if (eof) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "InBlocker._v_chunk"
              });
              _this._handle_eof(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return out = arguments[1];
                  };
                })(),
                lineno: 227
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            outbufs = [];
            err = null;
            (function(__iced_k) {
              var _results, _while;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_this._inq.n_bytes() >= _this.block_size && (err == null))) {
                  return _break();
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                      funcname: "InBlocker._v_chunk"
                    });
                    _this._handle_block(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          err = arguments[0];
                          return buf = arguments[1];
                        };
                      })(),
                      lineno: 232
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return _next(outbufs.push(buf));
                  });
                }
              };
              _while(__iced_k);
            })(function() {
              return __iced_k(out = Buffer.concat(outbufs));
            });
          }
        });
      })(this)((function(_this) {
        return function() {
          _this._chunk_debug_post({
            err: err,
            data: out
          });
          return cb(err, out);
        };
      })(this));
    };

    InBlocker.prototype._handle_eof = function(cb) {
      var buf, data, end, eof, esc, i, out, outbufs, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "InBlocker::_v_chunk");
      i = 0;
      outbufs = [];
      buf = this._inq.flush();
      eof = false;
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!!eof) {
              return _break();
            } else {
              end = i + _this.block_size;
              eof = end >= buf.length;
              data = buf.slice(i, end);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "InBlocker._handle_eof"
                });
                _this._v_inblock_chunk({
                  data: data,
                  eof: eof
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return out = arguments[0];
                    };
                  })(),
                  lineno: 251
                })));
                __iced_deferrals._fulfill();
              })(function() {
                outbufs.push(out);
                return _next(i = end);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          out = Buffer.concat(outbufs);
          return cb(null, out);
        };
      })(this));
    };

    InBlocker.prototype._handle_block = function(cb) {
      var data, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = this._pop_block();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "InBlocker._handle_block"
          });
          _this._v_inblock_chunk({
            data: data,
            eof: false
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 262
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    return InBlocker;

  })(SimpleInit);

  Demux = (function(_super) {
    __extends(Demux, _super);

    function Demux() {
      this._buffers = [];
      this._dlen = 0;
      this._sink = null;
      this._outbufs = [];
      Demux.__super__.constructor.call(this);
    }

    Demux.prototype.xbt_type = function() {
      return "xbt.Demux";
    };

    Demux.prototype._remux = function(_arg) {
      var data, outdata;
      data = _arg.data, outdata = _arg.outdata;
      if (typeof indata !== "undefined" && indata !== null ? indata.length : void 0) {
        this._buffers.push(indata);
        this._dlen += indata.length;
      }
      if (outdata.length != null) {
        this._outbufs.push(outdata);
      }
      return this._sink = null;
    };

    Demux.prototype._flush_out = function() {
      var out;
      out = Buffer.concat(this._outbufs);
      this._outbufs = [];
      return out;
    };

    Demux.prototype.chunk = function(_arg, cb) {
      var data, eof, err, out, pb, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      err = out = null;
      this._chunk_debug_pre({
        data: data,
        eof: eof
      });
      (function(_this) {
        return (function(__iced_k) {
          if (_this._sink == null) {
            if (data != null) {
              _this._buffers.push(data);
              _this._dlen += data.length;
            }
            (function(__iced_k) {
              if (_this._dlen >= (pb = _this.peek_bytes())) {
                data = Buffer.concat(_this._buffers);
                _this._buffers = [];
                _this._dlen = 0;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                    funcname: "Demux.chunk"
                  });
                  _this._demux({
                    data: data,
                    eof: eof
                  }, __iced_deferrals.defer({
                    assign_fn: (function(__slot_1) {
                      return function() {
                        err = arguments[0];
                        __slot_1._sink = arguments[1];
                        return data = arguments[2];
                      };
                    })(_this),
                    lineno: 315
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  var _ref1;
                  return __iced_k((_ref1 = _this._sink) != null ? _ref1.set_parent(_this) : void 0);
                });
              } else {
                return __iced_k(eof && _this._dlen ? (err = new Error("EOF before " + pb + " bytes (had " + _this._dlen + " ready)"), data = null) : void 0);
              }
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this._sink != null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "Demux.chunk"
                });
                _this._sink.chunk({
                  data: data,
                  eof: eof
                }, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return out = arguments[1];
                    };
                  })(),
                  lineno: 323
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(out = bufcat([_this._flush_out(), out]));
              });
            } else {
              return __iced_k();
            }
          })(function() {
            _this._chunk_debug_post({
              err: err,
              data: out
            });
            return cb(err, out);
          });
        };
      })(this));
    };

    return Demux;

  })(Base);

  Gets = (function(_super) {
    __extends(Gets, _super);

    function Gets(_arg) {
      var maxline, mod;
      maxline = _arg.maxline, mod = _arg.mod;
      this._maxline = maxline;
      this._mod = mod || 4;
      this._buffers = [];
      this._dlen = 0;
      this._dummy_mode = false;
      this._lineno = 0;
      Gets.__super__.constructor.call(this);
    }

    Gets.prototype.xbt_type = function() {
      return "Gets";
    };

    Gets.prototype.chunk = function(_arg, cb) {
      var buf, chunk, data, eof, err, esc, index, line, outbufs, prev, rest, retlen, start, tmp, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      err = null;
      outbufs = [];
      this._chunk_debug_pre({
        eof: eof,
        data: data
      });
      esc = make_esc(cb, "Gets::chunk");
      (function(_this) {
        return (function(__iced_k) {
          if ((data != null) && (v = buf_indices_of(data, "\n".charCodeAt(0))).length) {
            prev = Buffer.concat(_this._buffers);
            _this._buffers = [];
            _this._dlen = 0;
            start = 0;
            (function(__iced_k) {
              var _i, _len, _ref1, _results, _while;
              _ref1 = v;
              _len = _ref1.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  index = _ref1[_i];
                  line = bufcat([prev, data.slice(start, index)]);
                  _this._lineno++;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                      funcname: "Gets.chunk"
                    });
                    _this._v_line_chunk({
                      data: line,
                      newline: true,
                      eof: false
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return tmp = arguments[0];
                        };
                      })(),
                      lineno: 364
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    outbufs.push(tmp);
                    start = index + 1;
                    return _next(prev = null);
                  });
                }
              };
              _while(__iced_k);
            })(function() {
              rest = data.slice(start);
              _this._buffers = [rest];
              return __iced_k(_this._dlen = rest.length);
            });
          } else {
            (function(__iced_k) {
              if ((data != null) || eof) {
                if (data != null) {
                  _this._buffers.push(data);
                  _this._dlen += data.length;
                }
                chunk = null;
                if (_this._maxline && (_this._dlen > _this._maxline)) {
                  buf = Buffer.concat(_this._buffers);
                  retlen = Math.floor(_this._dlen / _this._mod) * _this._mod;
                  chunk = buf.slice(0, retlen);
                  rest = buf.slice(retlen);
                  _this._buffers = [rest];
                  _this._dlen = rest.length;
                }
                (function(__iced_k) {
                  if ((chunk != null) || eof) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                        funcname: "Gets.chunk"
                      });
                      _this._v_line_chunk({
                        data: chunk,
                        newline: false,
                        eof: eof
                      }, esc(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return tmp = arguments[0];
                          };
                        })(),
                        lineno: 385
                      })));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return __iced_k(outbufs.push(tmp));
                    });
                  } else {
                    return __iced_k();
                  }
                })(__iced_k);
              } else {
                return __iced_k();
              }
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          data = bufcat(outbufs);
          _this._chunk_debug_post({
            err: err,
            data: data
          });
          return cb(err, data);
        };
      })(this));
    };

    return Gets;

  })(Base);

  StreamAdapter = (function(_super) {
    __extends(StreamAdapter, _super);

    function StreamAdapter(_arg) {
      this.xbt = _arg.xbt;
      StreamAdapter.__super__.constructor.call(this);
    }

    StreamAdapter.prototype._transform = function(data, encoding, cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (typeof endcoding !== "undefined" && endcoding !== null) {
        data = new Buffer(data, encoding);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "StreamAdapter._transform"
          });
          _this.xbt.chunk({
            eof: false,
            data: data
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 401
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!(typeof err !== "undefined" && err !== null) && (typeof out !== "undefined" && out !== null)) {
            _this.push(out);
          }
          return cb(err);
        };
      })(this));
    };

    StreamAdapter.prototype._flush = function(cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "StreamAdapter._flush"
          });
          _this.xbt.chunk({
            eof: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 406
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!(typeof err !== "undefined" && err !== null) && (typeof out !== "undefined" && out !== null)) {
            _this.push(out);
          }
          return cb(err);
        };
      })(this));
    };

    return StreamAdapter;

  })(stream.Transform);

  ReverseAdapter = (function(_super) {
    __extends(ReverseAdapter, _super);

    function ReverseAdapter(_arg) {
      var hiwat;
      this.stream = _arg.stream, hiwat = _arg.hiwat;
      ReverseAdapter.__super__.constructor.call(this);
      this._buffers = [];
      this._dlen = 0;
      this._hiwat = hiwat || 0x1000;
    }

    ReverseAdapter.prototype.xbt_type = function() {
      return "ReverseAdapter";
    };

    ReverseAdapter.prototype._push_data = function(data) {
      if ((data != null) && data.length) {
        this._buffers.push(data);
        this._dlen += data.length;
        return true;
      } else {
        return false;
      }
    };

    ReverseAdapter.prototype._transform = function(data, cb) {
      var diff, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "ReverseAdapter._transform"
          });
          _this.stream.write(data, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 432
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          while ((diff = _this._hiwat - _this._dlen) > 0) {
            if (!_this._push_data(_this.stream.read(diff))) {
              break;
            }
          }
          return cb();
        };
      })(this));
    };

    ReverseAdapter.prototype._flush = function(cb) {
      this.stream.end();
      this.stream.on('data', (function(_this) {
        return function(data) {
          return _this._push_data(data);
        };
      })(this));
      this.stream.once('error', function(err) {
        return cb(err);
      });
      return this.stream.once('end', function(data) {
        return cb(null);
      });
    };

    ReverseAdapter.prototype._consume_bufs = function() {
      var out;
      out = Buffer.concat(this._buffers);
      this._buffers = [];
      this._dlen = 0;
      return out;
    };

    ReverseAdapter.prototype.chunk = function(_arg, cb) {
      var data, eof, err, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "ReverseAdapter::chunk");
      this._chunk_debug_pre({
        data: data,
        eof: eof
      });
      (function(_this) {
        return (function(__iced_k) {
          if (data != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "ReverseAdapter.chunk"
              });
              _this._transform(data, esc(__iced_deferrals.defer({
                lineno: 452
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (eof) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "ReverseAdapter.chunk"
                });
                _this._flush(esc(__iced_deferrals.defer({
                  lineno: 453
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            err = null;
            data = _this._consume_bufs();
            _this._chunk_debug_post({
              err: err,
              data: data
            });
            return cb(err, data);
          });
        };
      })(this));
    };

    return ReverseAdapter;

  })(Base);

  Queue = (function() {
    function Queue(_capacity) {
      this._capacity = _capacity;
      this._capacity || (this._capacity = 0x10000);
      this._buffers = [];
      this._dlen = 0;
      this._i = 0;
      this._wcb = null;
      this._rcb = null;
      this._wlock = new Lock;
      this._rlock = new Lock;
    }

    Queue.prototype.elongate = function(n) {
      return this._capacity = Math.max(n, this._capacity);
    };

    Queue.prototype.push = function(d) {
      var tmp;
      if (d != null ? d.length : void 0) {
        this._buffers.push(d);
        this._dlen += d.length;
      }
      if ((tmp = this._rcb)) {
        this._rcb = null;
        return tmp();
      }
    };

    Queue.prototype.n_bytes = function() {
      return this._dlen;
    };

    Queue.prototype.pull = function(n, peek) {
      var ret;
      if (n == null) {
        throw new Error("Bad argument to pull: " + n);
      }
      ret = n >= this.n_bytes() ? this.flush(peek) : this._pull(n, peek);
      if (n > 0 && !peek) {
        this._made_room();
      }
      return ret;
    };

    Queue.prototype.flush = function(peek) {
      var list, out;
      list = this._buffers.length && this._i ? [this._buffers[0].slice(this._i)].concat(this._buffers.slice(1)) : this._buffers;
      out = Buffer.concat(list);
      this._i = 0;
      if (peek != null) {
        this._buffers = [out];
      } else {
        this._dlen = 0;
        this._buffers = [];
      }
      return out;
    };

    Queue.prototype._made_room = function() {
      var tmp;
      if (this.n_bytes() < this._capacity && ((tmp = this._wcb) != null)) {
        this._wcb = null;
        return tmp();
      }
    };

    Queue.prototype.wait_then_push = function(data, cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "Queue.wait_then_push"
          });
          _this._wlock.acquire(__iced_deferrals.defer({
            lineno: 528
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
              funcname: "Queue.wait_then_push"
            });
            _this.wait_for_room(__iced_deferrals.defer({
              lineno: 529
            }));
            __iced_deferrals._fulfill();
          })(function() {
            _this.push(data);
            _this._wlock.release();
            return cb();
          });
        };
      })(this));
    };

    Queue.prototype.wait_then_read = function(_arg, cb) {
      var data, err, is_eof, max, min, peek, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      min = _arg.min, max = _arg.max, peek = _arg.peek, is_eof = _arg.is_eof;
      if (peek) {
        is_eof = null;
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "Queue.wait_then_read"
          });
          _this._rlock.acquire(__iced_deferrals.defer({
            lineno: 538
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.elongate(min);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
              funcname: "Queue.wait_then_read"
            });
            _this.wait_for_data(min, is_eof, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 540
            }));
            __iced_deferrals._fulfill();
          })(function() {
            data = typeof err !== "undefined" && err !== null ? null : _this.pull(max, peek);
            _this._rlock.release();
            return cb(err, data);
          });
        };
      })(this));
    };

    Queue.prototype.wait_for_room = function(cb) {
      if (this.n_bytes() < this._capacity) {
        return cb();
      } else {
        if (this._wcb) {
          throw new Error("Can't ovewrite @_wcb in buffer");
        }
        return this._wcb = cb;
      }
    };

    Queue.prototype.wait_for_data = function(n, is_eof, cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_this.n_bytes() < n && (!is_eof || !(is_eof())))) {
              return _break();
            } else {
              if (_this._rcb != null) {
                throw new Error("refusing to overwrite @_rcb");
              }
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "Queue.wait_for_data"
                });
                _this._rcb = __iced_deferrals.defer({
                  lineno: 559
                });
                __iced_deferrals._fulfill();
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          err = _this.n_bytes() < n ? new Error("EOF before " + n + " bytes") : null;
          return cb(err);
        };
      })(this));
    };

    Queue.prototype._pull = function(n, peek) {
      var b, end, getbuf, i, leftover, out, slices, start, stuff, total, _i, _len, _ref1;
      slices = [];
      total = 0;
      getbuf = function(buf, start, end) {
        if (!start && (end == null)) {
          return buf;
        } else if (end == null) {
          return buf.slice(start);
        } else {
          return buf.slice(start, end);
        }
      };
      _ref1 = this._buffers;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        b = _ref1[i];
        start = i === 0 ? this._i : 0;
        stuff = b.length - start;
        leftover = total + stuff - n;
        if (leftover < 0) {
          total += stuff;
          slices.push(getbuf(b, start));
        } else if (leftover === 0) {
          slices.push(getbuf(b, start));
          if (!peek) {
            this._buffers = this._buffers.slice(i + 1);
            this._i = 0;
          }
          break;
        } else {
          end = b.length - leftover;
          slices.push(getbuf(b, start, end));
          if (!peek) {
            this._buffers = this._buffers.slice(i);
            this._i = end;
          }
          break;
        }
      }
      out = Buffer.concat(slices);
      assert(out.length === n);
      if (!peek) {
        this._dlen -= n;
      }
      return out;
    };

    return Queue;

  })();

  Waitpoint = (function() {
    function Waitpoint() {
      this._hit = false;
      this._cb = null;
    }

    Waitpoint.prototype.trigger = function() {
      var tmp;
      this._hit = true;
      if ((tmp = this._cb)) {
        this._cb = null;
        return tmp();
      }
    };

    Waitpoint.prototype.wait = function(cb) {
      if (this._hit) {
        return cb();
      } else {
        if (this._cb != null) {
          throw err("Can't wait, someone is already waiting!");
        }
        return this._cb = cb;
      }
    };

    return Waitpoint;

  })();

  ReadBufferer = (function(_super) {
    __extends(ReadBufferer, _super);

    function ReadBufferer(_arg) {
      var bufsz;
      bufsz = _arg.bufsz;
      this._inq = new Queue(bufsz);
      this._outq = new Queue;
      this._source_eof = false;
      this._internal_eof = false;
      this._err = null;
      this._main_done = false;
      this._done_main_waitpoint = new Waitpoint;
      this._source_eof_waitpoint = new Waitpoint;
      ReadBufferer.__super__.constructor.call(this);
    }

    ReadBufferer.prototype.xbt_type = function() {
      return "ReadBufferrer";
    };

    ReadBufferer.prototype._emit = function(_arg, cb) {
      var data, eof, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      this._internal_eof = eof;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "ReadBufferer._emit"
          });
          _this._outq.wait_for_room(__iced_deferrals.defer({
            lineno: 645
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this._outq.push(data);
          return cb(null);
        };
      })(this));
    };

    ReadBufferer.prototype._push_data = function(_arg, cb) {
      var data, eof, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "ReadBufferer._push_data"
          });
          _this._inq.wait_then_push(data, __iced_deferrals.defer({
            lineno: 652
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    ReadBufferer.prototype._is_eof = function() {
      return this._source_eof;
    };

    ReadBufferer.prototype._pass_through = function(cb) {
      var next, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      next = new Passthrough();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "ReadBufferer._pass_through"
          });
          _this._stream_to(next, __iced_deferrals.defer({
            lineno: 663
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb();
        };
      })(this));
    };

    ReadBufferer.prototype._stream_to = function(next, cb) {
      var data, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this._sink = next;
      data = this._inq.flush();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "ReadBufferer._stream_to"
          });
          _this._sink.chunk({
            data: data,
            eof: _this._source_eof
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 671
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeof err === "undefined" || err === null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "ReadBufferer._stream_to"
                });
                _this._emit({
                  data: out,
                  eof: false
                }, __iced_deferrals.defer({
                  lineno: 673
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "ReadBufferer._stream_to"
              });
              _this._source_eof_waitpoint.wait(__iced_deferrals.defer({
                lineno: 674
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(err);
            });
          });
        };
      })(this));
    };

    ReadBufferer.prototype.run = function(cb) {
      throw new Error("unimplemented!");
    };

    ReadBufferer.prototype._run_main_loop = function() {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!this._running) {
        this._running = true;
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
              funcname: "ReadBufferer._run_main_loop"
            });
            _this.run(__iced_deferrals.defer({
              assign_fn: (function(__slot_1) {
                return function() {
                  return __slot_1._err = arguments[0];
                };
              })(_this),
              lineno: 686
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            return __iced_k(_this._done_main_waitpoint.trigger());
          };
        })(this));
      } else {
        return __iced_k();
      }
    };

    ReadBufferer.prototype.chunk = function(_arg, cb) {
      var data, eof, err, outdata, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      this._chunk_debug_pre({
        data: data,
        eof: eof
      });
      this._run_main_loop();
      if (eof) {
        this._source_eof = true;
      }
      outdata = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this._sink != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "ReadBufferer.chunk"
              });
              _this._sink.chunk({
                data: data,
                eof: eof
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return outdata = arguments[1];
                  };
                })(),
                lineno: 698
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "ReadBufferer.chunk"
              });
              _this._push_data({
                data: data,
                eof: eof
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 700
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (eof) {
              _this._source_eof_waitpoint.trigger();
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "ReadBufferer.chunk"
                });
                _this._done_main_waitpoint.wait(__iced_deferrals.defer({
                  lineno: 704
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            if (typeof err === "undefined" || err === null) {
              err = _this._err;
            }
            data = bufcat([_this._outq.flush(), outdata]);
            _this._chunk_debug_post({
              err: err,
              data: data
            });
            return cb(err, data);
          });
        };
      })(this));
    };

    ReadBufferer.prototype._peek = function(i, cb) {
      return this._read({
        exactly: i,
        peek: true
      }, cb);
    };

    ReadBufferer.prototype._read = function(_arg, cb) {
      var data, err, exactly, is_eof, max, min, peek, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      min = _arg.min, max = _arg.max, exactly = _arg.exactly, peek = _arg.peek;
      if (!((exactly != null) || ((min != null) && (max != null)))) {
        throw new Error("Bad arguments to _read");
      }
      if (exactly != null) {
        min = max = exactly;
      }
      is_eof = (function(_this) {
        return function() {
          return _this._source_eof;
        };
      })(this);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "ReadBufferer._read"
          });
          _this._inq.wait_then_read({
            min: min,
            max: max,
            peek: peek,
            is_eof: is_eof
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return data = arguments[1];
              };
            })(),
            lineno: 721
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, data);
        };
      })(this));
    };

    return ReadBufferer;

  })(Base);

  exports.Base = Base;

  exports.Chain = Chain;

  exports.SimpleInit = SimpleInit;

  exports.StreamAdapter = StreamAdapter;

  exports.ReverseAdapter = ReverseAdapter;

  exports.InBlocker = InBlocker;

  exports.Demux = Demux;

  exports.Passthrough = Passthrough;

  exports.Gets = Gets;

  exports.ReadBufferer = ReadBufferer;

}).call(this);
