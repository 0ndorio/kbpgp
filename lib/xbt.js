// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var Base, Chain, SimpleInit, StreamAdapter, iced, make_esc, stream, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  stream = require('stream');

  make_esc = require('iced-error').make_esc;

  Base = (function() {
    function Base() {}

    Base.prototype.chunk = function(_arg, cb) {
      var data, eof;
      data = _arg.data, eof = _arg.eof;
      return cb(new Error("unimplemented!"));
    };

    return Base;

  })();

  Chain = (function(_super) {
    __extends(Chain, _super);

    function Chain() {
      this.links = [];
    }

    Chain.prototype.push_xbt = function(link) {
      return this.links.push(link);
    };

    Chain.prototype.chunk = function(_arg, cb) {
      var data, eof, esc, l, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "Chain::chunk");
      out = null;
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = _this.links;
          _len = _ref.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              l = _ref[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/xbt.iced",
                  funcname: "Chain.chunk"
                });
                l.chunk({
                  data: data,
                  eof: eof
                }, esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return data = arguments[0];
                    };
                  })(),
                  lineno: 37
                })));
                __iced_deferrals._fulfill();
              })(function() {
                return _next(out = data);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null, out);
        };
      })(this));
    };

    return Chain;

  })(Base);

  SimpleInit = (function(_super) {
    __extends(SimpleInit, _super);

    function SimpleInit() {
      this._did_init = false;
    }

    SimpleInit.prototype.init = function(cb) {
      var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = data = null;
      (function(_this) {
        return (function(__iced_k) {
          if (!_this._did_init) {
            _this._did_init = true;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/xbt.iced",
                funcname: "SimpleInit.init"
              });
              _this._v_init(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return data = arguments[1];
                  };
                })(),
                lineno: 52
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, data);
        };
      })(this));
    };

    SimpleInit.prototype.chunk = function(_arg, cb) {
      var data, eof, esc, init_data, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "SimpleInit::chunk");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "SimpleInit.chunk"
          });
          _this.init(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return init_data = arguments[0];
              };
            })(),
            lineno: 57
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/xbt.iced",
              funcname: "SimpleInit.chunk"
            });
            _this._v_chunk({
              data: data,
              eof: eof
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return out = arguments[0];
                };
              })(),
              lineno: 58
            })));
            __iced_deferrals._fulfill();
          })(function() {
            if (typeof init_data !== "undefined" && init_data !== null) {
              out = Buffer.concat([init_data, out]);
            }
            return cb(null, out);
          });
        };
      })(this));
    };

    return SimpleInit;

  })(Base);

  StreamAdapter = (function(_super) {
    __extends(StreamAdapter, _super);

    function StreamAdapter(_arg) {
      this.xbt = _arg.xbt;
      StreamAdapter.__super__.constructor.call(this);
    }

    StreamAdapter.prototype._transform = function(data, encoding, cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (typeof endcoding !== "undefined" && endcoding !== null) {
        data = new Buffer(data, encoding);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "StreamAdapter._transform"
          });
          _this.xbt.chunk({
            eof: false,
            data: data
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 71
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!(typeof err !== "undefined" && err !== null) && (typeof out !== "undefined" && out !== null)) {
            _this.push(out);
          }
          return cb(err);
        };
      })(this));
    };

    StreamAdapter.prototype._flush = function(cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/xbt.iced",
            funcname: "StreamAdapter._flush"
          });
          _this.xbt.chunk({
            eof: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 76
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (!(typeof err !== "undefined" && err !== null) && (typeof out !== "undefined" && out !== null)) {
            _this.push(out);
          }
          return cb(err);
        };
      })(this));
    };

    return StreamAdapter;

  })(stream.Transform);

  exports.Base = Base;

  exports.Chain = Chain;

  exports.SimpleInit = SimpleInit;

  exports.StreamAdapter = StreamAdapter;

}).call(this);
