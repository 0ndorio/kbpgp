// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ASP, BigInteger, C, Pair, Priv, Pub, RSA, iced, make_esc, nbi, nbs, nbv, random_prime, __iced_k, __iced_k_noop, _ref, _ref1;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  _ref = require('./primegen'), random_prime = _ref.random_prime, nbs = _ref.nbs;

  RSA = require('openpgp').ciphers.asymmetric.RSA;

  _ref1 = require('openpgp').bigint, nbv = _ref1.nbv, nbi = _ref1.nbi, BigInteger = _ref1.BigInteger;

  ASP = require('./util').ASP;

  make_esc = require('iced-error').make_esc;

  C = require('./const').openpgp;

  Priv = (function() {
    function Priv(_arg) {
      this.p = _arg.p, this.q = _arg.q, this.d = _arg.d, this.dmp1 = _arg.dmp1, this.dmq1 = _arg.dmq1, this.u = _arg.u, this.pub = _arg.pub;
    }

    Priv.prototype.decrypt = function(c) {
      return c.modPow(this.d, this.pub.n);
    };

    return Priv;

  })();

  Pub = (function() {
    function Pub(_arg) {
      this.n = _arg.n, this.e = _arg.e;
    }

    Pub.prototype.encrypt = function(p) {
      return p.modPow(this.e, this.n);
    };

    return Pub;

  })();

  Pair = (function() {
    Pair.type = C.public_key_algorithms.RSA;

    Pair.prototype.type = Pair.type;

    function Pair(_arg) {
      this.priv = _arg.priv, this.pub = _arg.pub;
    }

    Pair.prototype.encrypt = function(p) {
      return this.pub.encrypt(p);
    };

    Pair.prototype.decrypt = function(c) {
      return this.priv.decrypt(c);
    };

    Pair.make = function(_arg) {
      var d, dmp1, dmq1, e, n, p, p1, phi, priv, pub, q, q1, u;
      p = _arg.p, q = _arg.q, e = _arg.e, phi = _arg.phi, p1 = _arg.p1, q1 = _arg.q1;
      n = p.multiply(q);
      d = e.modInverse(phi);
      dmp1 = d.mod(p1);
      dmq1 = d.mod(q1);
      u = p.modInverse(q);
      pub = new Pub({
        n: n,
        e: e
      });
      priv = new Priv({
        p: p,
        q: q,
        d: d,
        dmp1: dmp1,
        dmq1: dmq1,
        u: u,
        pub: pub
      });
      return new Pair({
        priv: priv,
        pub: pub
      });
    };

    Pair.prototype.to_openpgp = function() {
      var key;
      key = new (new RSA).keyObject();
      key.n = this.pub.n;
      key.e = this.pub.e.intValue();
      key.ee = this.pub.e;
      key.d = this.priv.d;
      key.p = this.priv.p;
      key.q = this.priv.q;
      key.dmp1 = this.priv.dmp1;
      key.dmq1 = this.priv.dmq1;
      key.u = this.priv.u;
      return key;
    };

    Pair.generate = function(_arg, cb) {
      var asp, e, e_orig, esc, go, iters, key, nbits, p, p1, phi, q, q1, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      nbits = _arg.nbits, iters = _arg.iters, e = _arg.e, asp = _arg.asp;
      e || (e = (1 << 16) + 1);
      e_orig = e;
      nbits || (nbits = 1024);
      iters || (iters = 10);
      asp || (asp = new ASP({}));
      e = nbv(e_orig);
      esc = make_esc(cb, "generate_rsa_keypair");
      go = true;
      nbits >>= 1;
      (function(__iced_k) {
        var _results, _while;
        _results = [];
        _while = function(__iced_k) {
          var _break, _continue, _next;
          _break = function() {
            return __iced_k(_results);
          };
          _continue = function() {
            return iced.trampoline(function() {
              return _while(__iced_k);
            });
          };
          _next = function(__iced_next_arg) {
            _results.push(__iced_next_arg);
            return _continue();
          };
          if (!go) {
            return _break();
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/rsa.iced",
                funcname: "Pair.generate"
              });
              random_prime({
                asp: asp.section('p'),
                e: e,
                nbits: nbits,
                iters: iters
              }, esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return p = arguments[0];
                  };
                })(),
                lineno: 74
              })));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/rsa.iced",
                  funcname: "Pair.generate"
                });
                asp.progress({
                  what: "found",
                  p: p
                }, esc(__iced_deferrals.defer({
                  lineno: 75
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/rsa.iced",
                    funcname: "Pair.generate"
                  });
                  random_prime({
                    asp: asp.section('q'),
                    e: e,
                    nbits: nbits,
                    iters: iters
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return q = arguments[0];
                      };
                    })(),
                    lineno: 76
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/rsa.iced",
                      funcname: "Pair.generate"
                    });
                    asp.progress({
                      what: "found",
                      q: q
                    }, esc(__iced_deferrals.defer({
                      lineno: 77
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    var _ref2;
                    if (p.compareTo(q) <= 0) {
                      _ref2 = [q, p], p = _ref2[0], q = _ref2[1];
                    }
                    q1 = q.subtract(BigInteger.ONE);
                    p1 = p.subtract(BigInteger.ONE);
                    phi = p1.multiply(q1);
                    return _next(phi.gcd(e).compareTo(BigInteger.ONE) !== 0 ? (typeof progress_hook === "function" ? progress_hook({
                      what: "unlucky_phi"
                    }) : void 0, go = true) : go = false);
                  });
                });
              });
            });
          }
        };
        _while(__iced_k);
      })(function() {
        key = Pair.make({
          p: p,
          q: q,
          e: e,
          phi: phi,
          p1: p1,
          q1: q1
        });
        return cb(null, key);
      });
    };

    return Pair;

  })();

  exports.RSA = Pair;

}).call(this);
