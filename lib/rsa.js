// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Avg, BigInteger, Montgomery, RSA, bench, generate_rsa_keypair, iced, nbi, nbs, nbv, random_prime, __iced_k, __iced_k_noop, _ref, _ref1;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  _ref = require('./primegen'), random_prime = _ref.random_prime, nbs = _ref.nbs;

  RSA = require('openpgp').ciphers.asymmetric.RSA;

  _ref1 = require('openpgp').bigint, Montgomery = _ref1.Montgomery, nbv = _ref1.nbv, nbi = _ref1.nbi, BigInteger = _ref1.BigInteger;

  Avg = (function() {
    function Avg() {
      this.tot = 0;
      this.n = 0;
    }

    Avg.prototype.start = function() {
      return this._t = Date.now();
    };

    Avg.prototype.stop = function() {
      var s;
      s = Date.now() - this._t;
      console.log("ran in " + s);
      this.tot += s;
      return this.n++;
    };

    Avg.prototype.avg = function() {
      return this.tot / this.n;
    };

    return Avg;

  })();

  generate_rsa_keypair = function(_arg, cb) {
    var d, e, e_orig, go, iters, key, nbits, p, p1, phi, progress_hook, q, q1, sub_hook, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    nbits = _arg.nbits, iters = _arg.iters, e = _arg.e, progress_hook = _arg.progress_hook;
    e || (e = (1 << 16) + 1);
    e_orig = e;
    nbits || (nbits = 1024);
    iters || (iters = 10);
    e = nbv(e_orig);
    sub_hook = function(section) {
      return function(obj) {
        obj.section = section;
        return typeof progress_hook === "function" ? progress_hook(obj) : void 0;
      };
    };
    go = true;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!go) {
          return _break();
        } else {
          nbits >>= 1;
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/rsa.iced",
              funcname: "generate_rsa_keypair"
            });
            random_prime({
              progress_hook: sub_hook("p"),
              e: e,
              nbits: nbits,
              iters: iters
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return p = arguments[0];
                };
              })(),
              lineno: 36
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/rsa.iced",
                funcname: "generate_rsa_keypair"
              });
              random_prime({
                progress_hook: sub_hook("q"),
                e: e,
                nbits: nbits,
                iters: iters
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return q = arguments[0];
                  };
                })(),
                lineno: 37
              }));
              __iced_deferrals._fulfill();
            })(function() {
              var _ref2;
              if (p.compareTo(q) <= 0) {
                _ref2 = [q, p], p = _ref2[0], q = _ref2[1];
              }
              q1 = q.subtract(BigInteger.ONE);
              p1 = p.subtract(BigInteger.ONE);
              phi = p1.multiply(q1);
              return _next(phi.gcd(e).compareTo(BigInteger.ONE) !== 0 ? (typeof progress_hook === "function" ? progress_hook({
                what: "unlucky_phi"
              }) : void 0, go = true) : go = false);
            });
          });
        }
      };
      _while(__iced_k);
    })(function() {
      key = new (new RSA).keyObject();
      key.n = p.multiply(q);
      key.p = p;
      key.q = q;
      key.d = d = e.modInverse(phi);
      key.dmp1 = d.mod(p1);
      key.dmq1 = d.mod(q1);
      key.u = p.modInverse(q);
      key.e = e_orig;
      key.ee = e;
      return cb(key);
    });
  };

  exports.generate_rsa_keypair = generate_rsa_keypair;

  bench = function() {
    var avg, i, key, progress_hook, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    progress_hook = function(obj) {
      var interval, s;
      if (obj.p != null) {
        s = obj.p.toString();
        s = "" + s.slice(0, 3) + "...." + s.slice(s.length - 6);
      } else {
        s = "";
      }
      return interval = (obj.total != null) && (obj.i != null) ? "(" + obj.i + " of " + obj.total + ")" : "";
    };
    avg = new Avg();
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            ++i;
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i < 10)) {
          return _break();
        } else {

          avg.start();
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/rsa.iced",
              funcname: "bench"
            });
            generate_rsa_keypair({
              nbits: 3072,
              progress_hook: progress_hook,
              iters: 10
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return key = arguments[0];
                };
              })(),
              lineno: 81
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return _next(avg.stop());
          });
        }
      };
      _while(__iced_k);
    })(function() {
      return console.log("stats: " + (avg.avg()));
    });
  };

}).call(this);
