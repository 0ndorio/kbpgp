// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var BaseBurner, BoxTransformEngine, C, Compressed, Demux, Literal, SEIPD, UnboxTransformEngine, XbtArmorer, XbtDearmorDemux, athrow, bufeq_secure, hashmod, iced, konst, make_esc, stream, unix_time, xbt, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  BaseBurner = require('./baseburner').BaseBurner;

  hashmod = require('../hash');

  konst = require('../const');

  C = konst.openpgp;

  _ref = require('../util'), athrow = _ref.athrow, bufeq_secure = _ref.bufeq_secure, unix_time = _ref.unix_time;

  Literal = require('./packet/literal').Literal;

  stream = require('stream');

  make_esc = require('iced-error').make_esc;

  xbt = require('../xbt');

  Compressed = require('./packet/compressed').Compressed;

  SEIPD = require('./packet/sess').SEIPD;

  Demux = require('./parser').Demux;

  _ref1 = require('./armor'), XbtDearmorDemux = _ref1.XbtDearmorDemux, XbtArmorer = _ref1.XbtArmorer;

  BoxTransformEngine = (function(_super) {
    __extends(BoxTransformEngine, _super);

    function BoxTransformEngine(_arg) {
      var encrypt_for, encryption_key, sign_with, signing_key;
      this.opts = _arg.opts, sign_with = _arg.sign_with, encrypt_for = _arg.encrypt_for, signing_key = _arg.signing_key, encryption_key = _arg.encryption_key;
      BoxTransformEngine.__super__.constructor.call(this, {
        sign_with: sign_with,
        encrypt_for: encrypt_for,
        signing_key: signing_key,
        encryption_key: encryption_key
      });
      this.packets = [];
      this.chain = new xbt.Chain;
      this.stream = new xbt.StreamAdapter({
        xbt: this.chain
      });
    }

    BoxTransformEngine.prototype.can_pass_through = function() {
      return true;
    };

    BoxTransformEngine.prototype._read_opts = function(cb) {
      var err, v, _ref2, _ref3, _ref4;
      err = null;
      v = ((_ref2 = this.opts) != null ? _ref2.compression : void 0) || 'none';
      if ((this.compression = C.compression[v]) == null) {
        err = new Error("no known compression: " + v);
      }
      v = ((_ref3 = this.opts) != null ? _ref3.encoding : void 0) || 'binary';
      if ((this.encoding = C.literal_formats[v]) == null) {
        err = new Error("no known encoding: " + v);
      }
      if ((v = (_ref4 = this.opts) != null ? _ref4.armor : void 0) && ((this.armor = C.message_types[v]) == null)) {
        err = new Error("bad armor message type: " + v);
      }
      return cb(err);
    };

    BoxTransformEngine.prototype.init = function(cb) {
      var esc, literal, sig, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Burner::init");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
            funcname: "BoxTransformEngine.init"
          });
          _this._find_keys(esc(__iced_deferrals.defer({
            lineno: 52
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
              funcname: "BoxTransformEngine.init"
            });
            _this._read_opts(esc(__iced_deferrals.defer({
              lineno: 53
            })));
            __iced_deferrals._fulfill();
          })(function() {
            literal = new Literal({
              format: _this.encoding,
              date: unix_time()
            });
            if (_this.signing_key != null) {
              sig = _this._make_sig_packet({
                hasher: hashmod.streamers.SHA512()
              });
              _this.chain.push_xbt(_this._make_ops_packet().new_xbt({
                sig: sig,
                literal: literal
              }));
            } else {
              _this.chain.push_xbt(literal.new_xbt());
            }
            if (_this.compression !== C.compression.none) {
              _this.chain.push_xbt((new Compressed({
                algo: _this.compression
              })).new_xbt());
            }
            (function(__iced_k) {
              if (_this.encryption_key != null) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
                    funcname: "BoxTransformEngine.init"
                  });
                  _this._setup_encryption(esc(__iced_deferrals.defer({
                    lineno: 67
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  return __iced_k(_this.chain.push_xbt((new SEIPD({})).new_xbt({
                    pkesk: _this.pkesk,
                    cipher: _this.cipher,
                    prefixrandom: _this.prefixrandom
                  })));
                });
              } else {
                return __iced_k();
              }
            })(function() {
              if (_this.armor != null) {
                _this.chain.push_xbt(new XbtArmorer({
                  type: _this.armor
                }));
              }
              return cb(null, _this.stream);
            });
          });
        };
      })(this));
    };

    return BoxTransformEngine;

  })(BaseBurner);

  UnboxTransformEngine = (function() {
    function UnboxTransformEngine(_arg) {
      this.keyfetch = _arg.keyfetch;
      this.chain = new xbt.Chain;
      this.stream = new xbt.StreamAdapter({
        xbt: this.chain
      });
    }

    UnboxTransformEngine.prototype.init = function(cb) {
      this.chain.verify_sig = this.verify_sig.bind(this);
      this.chain.push_xbt(new XbtDearmorDemux({})).push_xbt(new Demux({}));
      return cb(null, this.stream);
    };

    UnboxTransformEngine.prototype.verify_sig = function(cb) {
      var a, b, err, esc, hasher, i, key_material, obj, ops, sig, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref2;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "UnboxTransformEngine::verify_sig");
      _ref2 = this.chain.get_metadata(), ops = _ref2.ops, sig = _ref2.sig;
      if ((ops == null) || (sig == null)) {
        err = new Error("Can only verify a OnePassSig/Signature configuration in streaming mode");
      } else if ((hasher = this.chain.pop_hasher()) == null) {
        err = new Error("No running hasher going, can't proceed");
      } else if ((a = hasher.type) !== (b = sig.hasher.type)) {
        err = new Error("Hasher type mismatch: " + a + " != " + b);
      } else if (!bufeq_secure((a = ops.key_id), (b = sig.get_key_id()))) {
        err = new Error("Key mismatch: " + (a != null ? a.toString('hex') : void 0) + " v " + (b != null ? b.toString('hex') : void 0));
      } else if (!this.keyfetch) {
        err = new Error("Cannot verify a signature without a keyfetch");
      }
      (function(_this) {
        return (function(__iced_k) {
          if (err != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
                funcname: "UnboxTransformEngine.verify_sig"
              });
              athrow(err, esc(__iced_deferrals.defer({
                lineno: 109
              })));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
              funcname: "UnboxTransformEngine.verify_sig"
            });
            _this.keyfetch.fetch([a], konst.ops.verify, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  key_material = arguments[0];
                  i = arguments[1];
                  return obj = arguments[2];
                };
              })(),
              lineno: 111
            })));
            __iced_deferrals._fulfill();
          })(function() {
            sig.key = key_material.key;
            sig.keyfetch_obj = obj;
            sig.hasher = hasher;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
                funcname: "UnboxTransformEngine.verify_sig"
              });
              sig.verify([], esc(__iced_deferrals.defer({
                lineno: 116
              })));
              __iced_deferrals._fulfill();
            })(function() {
              sig.verified = true;
              return cb(null);
            });
          });
        };
      })(this));
    };

    return UnboxTransformEngine;

  })();

  exports.box = function(opts, cb) {
    var eng, err, xform, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    eng = new BoxTransformEngine(opts);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
          funcname: "box"
        });
        eng.init(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return xform = arguments[1];
            };
          })(),
          lineno: 125
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, xform);
      };
    })(this));
  };

  exports.unbox = function(opts, cb) {
    var eng, err, xform, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    eng = new UnboxTransformEngine(opts);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
          funcname: "unbox"
        });
        eng.init(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return xform = arguments[1];
            };
          })(),
          lineno: 132
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, xform, eng);
      };
    })(this));
  };

}).call(this);
