// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var BaseBurner, BoxTransformEngine, C, Literal, Pipeline, hashmod, iced, unix_time, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  BaseBurner = require('./baseburner').BaseBurner;

  hashmod = require('../hash');

  C = require('../const').openpgp;

  unix_time = require('../util').unix_time;

  Literal = require('./packet/literal').Literal;

  Pipeline = (function(_super) {
    __extends(Pipeline, _super);

    function Pipeline() {
      this.xforms = [];
      this.last = null;
      Pipeline.__super__.constructor.call(this);
    }

    Pipeline.prototype.push_xform = function(x) {
      if (this.last != null) {
        this.last.pipe(x);
      }
      this.xforms.push(x);
      return this.last = x;
    };

    Pipeline.prototype.start = function() {
      this.last.on('data', function(chunk) {
        return this.push(chunk);
      });
      return this.last.on('emit', function(err) {
        return this.emit('error', err);
      });
    };

    Pipeline.prototype._transform = function(chunk, encoding, cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
            funcname: "Pipeline._transform"
          });
          _this.xforms[0].write(chunk, encoding, __iced_deferrals.defer({
            lineno: 26
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb();
        };
      })(this));
    };

    Pipeline.prototype._flush = function(cb) {
      var x, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = _this.xforms;
          _len = _ref.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              x = _ref[_i];
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
                  funcname: "Pipeline._flush"
                });
                x.end(__iced_deferrals.defer({
                  lineno: 31
                }));
                __iced_deferrals._fulfill();
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb();
        };
      })(this));
    };

    return Pipeline;

  })(stream.Transform);

  BoxTransformEngine = (function(_super) {
    __extends(BoxTransformEngine, _super);

    function BoxTransformEngine(_arg) {
      var encrypt_for, encryption_key, sign_with, signing_key;
      this.opts = _arg.opts, sign_with = _arg.sign_with, encrypt_for = _arg.encrypt_for, signing_key = _arg.signing_key, encryption_key = _arg.encryption_key;
      BoxTransformEngine.__super__.constructor.call(this, {
        sign_with: sign_with,
        encrypt_for: encrypt_for,
        signing_key: signing_key,
        encryption_key: encryption_key
      });
      this.packets = [];
      this.pipeline = new Pipeline;
    }

    BoxTransformEngine.prototype._read_opts = function(cb) {
      var err, v, _ref, _ref1;
      err = null;
      v = ((_ref = this.opts) != null ? _ref.compression : void 0) || 'none';
      if ((this.compression = C.compression[v]) == null) {
        err = new Error("no known compression: " + v);
      }
      v = ((_ref1 = this.opts) != null ? _ref1.encoding : void 0) || 'binary';
      if ((this.encoding = C.literal_formats[v]) == null) {
        err = new Error("no known encoding: " + v);
      }
      return cb(err);
    };

    BoxTransformEngine.prototype.init = function(cb) {
      var esc, literal, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Burner::init");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
            funcname: "BoxTransformEngine.init"
          });
          _this._find_keys(esc(__iced_deferrals.defer({
            lineno: 61
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
              funcname: "BoxTransformEngine.init"
            });
            _this._read_opts(esc(__iced_deferrals.defer({
              lineno: 62
            })));
            __iced_deferrals._fulfill();
          })(function() {
            literal = new Literal({
              format: _this.encoding,
              date: unix_time()
            });
            if (_this.signing_key != null) {
              _this.pipeline.push(_this._make_ops_packet().new_stream({
                sig: _this._make_sig_packet(),
                literal: literal
              }));
            } else {
              _this.pipeline.push(literal.new_stream());
            }
            _this.pipeline.start();
            return cb(null, _this.pipeline);
          });
        };
      })(this));
    };

    return BoxTransformEngine;

  })(BaseBurner);

  exports.box = function(opts, cb) {
    var eng, err, xform, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    eng = new BoxTransformEngine(opts);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/stream.iced",
          funcname: "box"
        });
        eng.init(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return xform = arguments[1];
            };
          })(),
          lineno: 84
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, xform);
      };
    })(this));
  };

}).call(this);
