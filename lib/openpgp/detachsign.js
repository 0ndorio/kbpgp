// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var C, Ch, CreationTime, Issuer, Literal, SHA512, Signature, Signer, Verifier, WordArray, encode, hash_obj_to_fn, iced, konst, make_esc, triplesec, tsec, unix_time, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  tsec = require('triplesec');

  SHA512 = tsec.hash.SHA512;

  WordArray = require(tsec).WordArray;

  _ref = require('./packet/signature'), Signature = _ref.Signature, CreationTime = _ref.CreationTime, Issuer = _ref.Issuer;

  unix_time = require('../util').unix_time;

  triplesec = require('triplesec');

  WordArray = triplesec.WordArray;

  konst = require('../const');

  C = konst.openpgp;

  Ch = require('../header');

  SHA512 = triplesec.hash.SHA512;

  encode = require('./armor').encode;

  Literal = require("./packet/literal").Literal;

  hash_obj_to_fn = function(obj) {
    return function(buf) {
      return obj.finalize(WordArray.from_buffer(buf)).to_buffer();
    };
  };

  Signer = (function() {
    function Signer(_arg) {
      this.data = _arg.data, this.hash_obj = _arg.hash_obj, this.signing_key = _arg.signing_key;
    }

    Signer.prototype.run = function(cb) {
      var encoded, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Signer::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
            funcname: "Signer.run"
          });
          _this._run_hash(esc(__iced_deferrals.defer({
            lineno: 39
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
              funcname: "Signer.run"
            });
            _this._sign(esc(signature));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
                funcname: "Signer.run"
              });
              _this._encode(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return encoded = arguments[0];
                  };
                })(),
                lineno: 41
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null, signature, encoded);
            });
          });
        };
      })(this));
    };

    Signer.prototype.scrub = function() {};

    Signer.prototype._sign = function(cb) {
      var emptybuf, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.sig = new Signature({
        sig_type: C.sig_types.canonical_text,
        key: this.signing_key.key,
        hashed_subpackets: [new CreationTime(unix_time())],
        unhashed_subpackets: [new Issuer(this.signing_key.get_key_id())],
        hasher: hash_obj_to_fn(this.hash_obj)
      });
      emptybuf = new Buffer([]);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
            funcname: "Signer._sign"
          });
          _this.sig.write(emptybuf, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                err = arguments[0];
                return __slot_1._sig_output = arguments[1];
              };
            })(_this),
            lineno: 60
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Signer.prototype._encode = function(cb) {
      var ret;
      ret = encode(C.message_types.signature, this._sig_output);
      return cb(err, ret);
    };

    Signer.prototype._run_hash = function(cb) {
      var err;
      err = null;
      if (this.hash_obj != null) {

      } else if (this.data != null) {
        this.hash_obj = new SHA512();
        this.hash_obj.update(WordArray.from_buffer(this.data));
      } else {
        err = new Error("Need either a hasher or data");
      }
      return cb(err);
    };

    return Signer;

  })();

  Verifier = (function() {
    function Verifier(_arg) {
      this.packets = _arg.packets, this.data = _arg.data, this.data_fn = _arg.data_fn, this.key_fetch = _arg.key_fetch;
    }

    Verifier.prototype._find_signature = function(cb) {
      var err, n;
      err = (n = this.packets.length) !== 1 ? new Error("Expected one signature packet; got " + n) : (this._sig = this.packets[0]).tag !== C.packet_tags.signature ? new Error("Expected a signature packet; but got type=" + this.packets[0].tag) : null;
      return cb(null);
    };

    Verifier.prototype._consume_data = function(cb) {
      var done, err, go, hasher, klass, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      klass = this._sig.hasher.klass;
      hasher = new klass();
      (function(_this) {
        return (function(__iced_k) {
          if (_this.data) {
            return __iced_k(hasher.update(WordArray.from_buffer(_this.data)));
          } else {
            go = true;
            (function(__iced_k) {
              var _results, _while;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!go) {
                  return _break();
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
                      funcname: "Verifier._consume_data"
                    });
                    _this.data_fn(hasher, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          err = arguments[0];
                          return done = arguments[1];
                        };
                      })(),
                      lineno: 110
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return _next(err || done ? go = false : void 0);
                  });
                }
              };
              _while(__iced_k);
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          _this._sig.hasher = hash_obj_to_fn(hasher);
          return cb(err);
        };
      })(this));
    };

    Verifier.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Verifier::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
            funcname: "Verifier.run"
          });
          _this._find_signature(esc(__iced_deferrals.defer({
            lineno: 119
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
              funcname: "Verifier.run"
            });
            _this._consume_data(esc(__iced_deferrals.defer({
              lineno: 120
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
                funcname: "Verifier.run"
              });
              _this._verify(esc(__iced_deferrals.defer({
                lineno: 121
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    return Verifier;

  })();

  exports.sign = function(_arg, cb) {
    var data, encoded, err, hash_obj, s, signature, signing_key, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    data = _arg.data, hash_obj = _arg.hash_obj, signing_key = _arg.signing_key;
    s = new Signer({
      data: data,
      hash_obj: hash_obj,
      signing_key: signing_key
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
          funcname: "sign"
        });
        s.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              encoded = arguments[1];
              return signature = arguments[2];
            };
          })(),
          lineno: 128
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        s.scrub();
        return cb(err, encoded, signature);
      };
    })(this));
  };

  exports.verify = function(_arg, cb) {
    var data, data_fn, err, key_fetch, packets, v, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    data = _arg.data, data_fn = _arg.data_fn, packets = _arg.packets, key_fetch = _arg.key_fetch;
    v = new Verifier({
      data: data,
      data_fn: data_fn,
      hasher: hasher,
      packets: packets,
      key_fetch: key_fetch
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/detachsign.iced",
          funcname: "verify"
        });
        v.run(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 136
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err);
      };
    })(this));
  };

}).call(this);
