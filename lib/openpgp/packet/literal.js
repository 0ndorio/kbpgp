// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var C, Literal, LiteralParser, Packet, asymmetric,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };



  Packet = require('./base').Packet;

  C = require('../../const').openpgp;

  asymmetric = require('../../asymmetric');

  Literal = (function(_super) {
    __extends(Literal, _super);

    function Literal(_arg) {
      this.format = _arg.format, this.filename = _arg.filename, this.date = _arg.date, this.data = _arg.data;
    }

    Literal.parse = function(slice) {
      return (new LiteralParser(slice)).parse();
    };

    Literal.prototype.toString = function() {
      return this.data.toString(this.buffer_format());
    };

    Literal.prototype.buffer_format = function() {
      switch (this.format) {
        case C.literal_formats.text:
          return 'ascii';
        case C.literal_formats.utf8:
          return 'utf8';
        default:
          return 'binary';
      }
    };

    Literal.prototype.to_signature_payload = function() {
      return Buffer.concat([this.data]);
    };

    return Literal;

  })(Packet);

  LiteralParser = (function() {
    function LiteralParser(slice) {
      this.slice = slice;
    }

    LiteralParser.prototype.parse = function() {
      var data, date, filename, format, k, known_formats, v;
      known_formats = (function() {
        var _ref, _results;
        _ref = C.literal_formats;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          _results.push(v);
        }
        return _results;
      })();
      format = this.slice.read_uint8();
      if (__indexOf.call(known_formats, format) < 0) {
        throw new Error("unknwon format: " + format);
      }
      filename = this.slice.read_string();
      date = this.slice.read_uint32();
      data = this.slice.consume_rest_to_buffer();
      return new Literal({
        format: format,
        filename: filename,
        date: date,
        data: data
      });
    };

    return LiteralParser;

  })();

  exports.Literal = Literal;

}).call(this);
