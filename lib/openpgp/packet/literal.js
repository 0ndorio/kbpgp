// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var C, HashThrough, Literal, LiteralParser, OutStream, Packet, PacketParser, Packetizer, Passthrough, XbtIn, XbtOut, asymmetric, iced, make_esc, uint_to_buffer, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  _ref = require('./base'), OutStream = _ref.OutStream, Packet = _ref.Packet;

  C = require('../../const').openpgp;

  asymmetric = require('../../asymmetric');

  uint_to_buffer = require('../../util').uint_to_buffer;

  Packetizer = require('./xbt_packetizer').Packetizer;

  PacketParser = require('./xbt_depacketizer').PacketParser;

  make_esc = require('iced-error').make_esc;

  _ref1 = require('../../xbt'), Passthrough = _ref1.Passthrough, HashThrough = _ref1.HashThrough;

  Literal = (function(_super) {
    __extends(Literal, _super);

    Literal.TAG = C.packet_tags.literal;

    Literal.prototype.TAG = Literal.TAG;

    function Literal(_arg) {
      this.format = _arg.format, this.filename = _arg.filename, this.date = _arg.date, this.data = _arg.data;
      Literal.__super__.constructor.call(this);
    }

    Literal.parse = function(slice) {
      return (new LiteralParser(slice)).parse();
    };

    Literal.prototype.toString = function() {
      return this.data.toString(this.buffer_format());
    };

    Literal.prototype.buffer_format = function() {
      switch (this.format) {
        case C.literal_formats.text:
          return 'ascii';
        case C.literal_formats.utf8:
          return 'utf8';
        default:
          return 'binary';
      }
    };

    Literal.prototype.to_signature_payload = function() {
      return Buffer.concat([this.data]);
    };

    Literal.prototype.write_unframed = function(cb) {
      var bufs, ret;
      this.filename || (this.filename = new Buffer([]));
      bufs = [new Buffer([this.format]), uint_to_buffer(8, this.filename.length), this.filename, uint_to_buffer(32, this.date)];
      if (this.data != null) {
        bufs.push(this.data);
      }
      ret = Buffer.concat(bufs);
      return cb(null, ret);
    };

    Literal.prototype.to_literal = function() {
      return this;
    };

    Literal.prototype.new_xbt = function() {
      return new XbtOut({
        packet: this
      });
    };

    Literal.new_xbt_parser = function(arg) {
      return new XbtIn(arg);
    };

    return Literal;

  })(Packet);

  LiteralParser = (function() {
    function LiteralParser(slice) {
      this.slice = slice;
    }

    LiteralParser.prototype.parse = function() {
      var data, date, filename, format, k, known_formats, v;
      known_formats = (function() {
        var _ref2, _results;
        _ref2 = C.literal_formats;
        _results = [];
        for (k in _ref2) {
          v = _ref2[k];
          _results.push(v);
        }
        return _results;
      })();
      format = this.slice.read_uint8();
      if (__indexOf.call(known_formats, format) < 0) {
        throw new Error("unknown format: " + format);
      }
      filename = this.slice.read_string();
      date = this.slice.read_uint32();
      data = this.slice.consume_rest_to_buffer();
      return new Literal({
        format: format,
        filename: filename,
        date: date,
        data: data
      });
    };

    return LiteralParser;

  })();

  exports.XbtOut = XbtOut = Packetizer;

  XbtIn = (function(_super) {
    __extends(XbtIn, _super);

    function XbtIn() {
      XbtIn.__super__.constructor.call(this, {});
      this._tot = 0;
    }

    XbtIn.prototype._parse_header = function(cb) {
      var date, err, esc, filename, format, literal, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("FUUUUCK PARSE HAEDER IN LITERAL:where");
      console.log(this._inq);
      console.log(this._source_eof);
      esc = make_esc(cb, "XbtIn::parse_header");
      err = null;
      this._SHIT = true;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/literal.iced",
            funcname: "XbtIn._parse_header"
          });
          _this._read_uint8(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return format = arguments[0];
              };
            })(),
            lineno: 110
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          console.log(_this._inq);
          console.log("A");
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/literal.iced",
              funcname: "XbtIn._parse_header"
            });
            _this._read_string(esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return filename = arguments[0];
                };
              })(),
              lineno: 113
            })));
            __iced_deferrals._fulfill();
          })(function() {
            console.log("B");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/literal.iced",
                funcname: "XbtIn._parse_header"
              });
              _this._read_uint32(esc(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return date = arguments[0];
                  };
                })(),
                lineno: 115
              })));
              __iced_deferrals._fulfill();
            })(function() {
              console.log("C");
              literal = new Literal({
                format: format,
                filename: filename,
                date: date
              });
              console.log("D");
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/literal.iced",
                  funcname: "XbtIn._parse_header"
                });
                _this.set_root_metadata({
                  slice: 'literal',
                  value: literal
                }, esc(__iced_deferrals.defer({
                  lineno: 119
                })));
                __iced_deferrals._fulfill();
              })(function() {
                console.log("FJSDFOISODF SODF SD DINE WITH WHTAT ASHTISDKFSODFK");
                return cb(null);
              });
            });
          });
        };
      })(this));
    };

    XbtIn.prototype._run_body = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("RUN BODY in Literal!");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/literal.iced",
            funcname: "XbtIn._run_body"
          });
          _this._pass_through(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 127
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          console.log("RUN BODY DONE");
          return cb(null);
        };
      })(this));
    };

    return XbtIn;

  })(PacketParser);

  exports.Literal = Literal;

}).call(this);
