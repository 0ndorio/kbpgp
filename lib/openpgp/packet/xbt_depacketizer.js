// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var C, Depacketizer, PacketParser, PgpReadBufferer, bufcat, iced, make_esc, xbt, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  xbt = require('../../xbt');

  bufcat = require('../../util').bufcat;

  C = require('../../const').openpgp;

  make_esc = require('iced-error').make_esc;

  PgpReadBufferer = (function(_super) {
    __extends(PgpReadBufferer, _super);

    function PgpReadBufferer() {
      return PgpReadBufferer.__super__.constructor.apply(this, arguments);
    }

    PgpReadBufferer.prototype._read_uint8 = function(cb) {
      var buf, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
            funcname: "PgpReadBufferer._read_uint8"
          });
          _this._read({
            exactly: 1
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return buf = arguments[1];
              };
            })(),
            lineno: 13
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          out = typeof err !== "undefined" && err !== null ? null : buf.readUInt8(0);
          return cb(err, out);
        };
      })(this));
    };

    PgpReadBufferer.prototype._read_uint16 = function(cb) {
      var buf, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
            funcname: "PgpReadBufferer._read_uint16"
          });
          _this._read({
            exactly: 2
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return buf = arguments[1];
              };
            })(),
            lineno: 20
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          out = typeof err !== "undefined" && err !== null ? null : buf.readUInt16BE(0);
          return cb(err, out);
        };
      })(this));
    };

    PgpReadBufferer.prototype._read_uint32 = function(cb) {
      var buf, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
            funcname: "PgpReadBufferer._read_uint32"
          });
          _this._read({
            exactly: 4
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return buf = arguments[1];
              };
            })(),
            lineno: 27
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          out = typeof err !== "undefined" && err !== null ? null : buf.readUInt32BE(0);
          return cb(err, out);
        };
      })(this));
    };

    PgpReadBufferer.prototype._read_string = function(cb) {
      var buf, esc, len, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_read_string");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
            funcname: "PgpReadBufferer._read_string"
          });
          _this._read_uint8(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return len = arguments[0];
              };
            })(),
            lineno: 35
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
              funcname: "PgpReadBufferer._read_string"
            });
            _this._read({
              exactly: len
            }, esc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return buf = arguments[0];
                };
              })(),
              lineno: 36
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null, buf);
          });
        };
      })(this));
    };

    return PgpReadBufferer;

  })(xbt.ReadBufferer);

  exports.Depacketizer = Depacketizer = (function(_super) {
    __extends(Depacketizer, _super);

    function Depacketizer(_arg) {
      this.packet_version = _arg.packet_version;
      Depacketizer.__super__.constructor.call(this, {});
      this._total = 0;
    }

    Depacketizer.prototype.run = function(cb) {
      var data, esc, final, len, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      final = false;
      esc = make_esc(cb, "_depacketize_1");
      (function(_this) {
        return (function(__iced_k) {
          var _results, _while;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!!final) {
              return _break();
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
                  funcname: "Depacketizer.run"
                });
                _this._find_length(esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      final = arguments[0];
                      return len = arguments[1];
                    };
                  })(),
                  lineno: 53
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
                    funcname: "Depacketizer.run"
                  });
                  _this._read(len, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return data = arguments[0];
                      };
                    })(),
                    lineno: 54
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  _this._total += len;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
                      funcname: "Depacketizer.run"
                    });
                    _this._emit({
                      data: data,
                      eof: final
                    }, esc(__iced_deferrals.defer({
                      lineno: 56
                    })));
                    __iced_deferrals._fulfill();
                  })(_next);
                });
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          return cb(null);
        };
      })(this));
    };

    Depacketizer.prototype._find_length = function(cb) {
      var err, esc, final, first, nxt, ret, second, tag, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_find_length");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
            funcname: "Depacketizer._find_length"
          });
          _this._read_uint8(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return tag = arguments[0];
              };
            })(),
            lineno: 63
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          err = ret = null;
          final = true;
          (function(__iced_k) {
            if (_this.packet_version === C.packet_version.old) {
              nxt = (function() {
                switch (tag & 0x03) {
                  case 0:
                    return this._read_uint8.bind(this);
                  case 1:
                    return this._read_uint16.bind(this);
                  case 2:
                    return this._read_uint32.bind(this);
                  default:
                    err = new Error("Cannot handle old-style wildcard lengths");
                    return null;
                }
              }).call(_this);
              (function(__iced_k) {
                if (nxt != null) {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
                      funcname: "Depacketizer._find_length"
                    });
                    nxt(esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return ret = arguments[0];
                        };
                      })(),
                      lineno: 75
                    })));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
                  funcname: "Depacketizer._find_length"
                });
                _this._read_uint8(esc(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return first = arguments[0];
                    };
                  })(),
                  lineno: 78
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (first < 192) {
                    return __iced_k(ret = first);
                  } else {
                    (function(__iced_k) {
                      if (first === 255) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
                            funcname: "Depacketizer._find_length"
                          });
                          _this._read_uint32(esc(__iced_deferrals.defer({
                            assign_fn: (function() {
                              return function() {
                                return ret = arguments[0];
                              };
                            })(),
                            lineno: 81
                          })));
                          __iced_deferrals._fulfill();
                        })(__iced_k);
                      } else {
                        (function(__iced_k) {
                          if (first < 224) {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
                                funcname: "Depacketizer._find_length"
                              });
                              _this._read_uint8(esc(__iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return second = arguments[0];
                                  };
                                })(),
                                lineno: 83
                              })));
                              __iced_deferrals._fulfill();
                            })(function() {
                              return __iced_k(ret = ((first - 192) << 8) + (second + 192));
                            });
                          } else {
                            ret = 1 << (first & 0x1f);
                            return __iced_k(final = false);
                          }
                        })(__iced_k);
                      }
                    })(__iced_k);
                  }
                })(__iced_k);
              });
            }
          })(function() {
            return cb(err, final, ret);
          });
        };
      })(this));
    };

    return Depacketizer;

  })(PgpReadBufferer);

  exports.PacketParser = PacketParser = (function(_super) {
    __extends(PacketParser, _super);

    function PacketParser() {
      PacketParser.__super__.constructor.call(this, {});
    }

    PacketParser.prototype.run = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "PacketParser::_process");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
            funcname: "PacketParser.run"
          });
          _this._process_header(esc(__iced_deferrals.defer({
            lineno: 99
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_depacketizer.iced",
              funcname: "PacketParser.run"
            });
            _this._pass_through(esc(__iced_deferrals.defer({
              lineno: 100
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null);
          });
        };
      })(this));
    };

    return PacketParser;

  })(PgpReadBufferer);

}).call(this);
