// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var C, Chain, Compressed, CompressionParser, Packet, PacketParser, Packetizer, ReverseAdapter, XbtIn, XbtOut, asymmetric, bzip_inflate, compressjs, fake_zip_deflate, fake_zip_inflate, iced, make_esc, uint_to_buffer, zlib, __iced_k, __iced_k_noop, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  Packet = require('./base').Packet;

  C = require('../../const').openpgp;

  asymmetric = require('../../asymmetric');

  zlib = require('zlib');

  uint_to_buffer = require('../../util').uint_to_buffer;

  compressjs = require('keybase-compressjs');

  Packetizer = require('./xbt_packetizer').Packetizer;

  _ref = require('../../xbt'), Chain = _ref.Chain, ReverseAdapter = _ref.ReverseAdapter;

  make_esc = require('iced-error').make_esc;

  PacketParser = require('./xbt_depacketizer').PacketParser;

  fake_zip_inflate = function(buf, cb) {
    var err, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    buf = Buffer.concat([new Buffer([0x78, 0x9c]), buf]);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced"
        });
        zlib.inflate(buf, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return ret = arguments[1];
            };
          })(),
          lineno: 16
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        return cb(err, ret);
      };
    })(this));
  };

  fake_zip_deflate = function(buf, cb) {
    var err, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced"
        });
        zlib.deflate(buf, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return ret = arguments[1];
            };
          })(),
          lineno: 20
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        if (!(typeof err !== "undefined" && err !== null) && (typeof ret !== "undefined" && ret !== null)) {
          ret = ret.slice(3);
        }
        return cb(err, ret);
      };
    })(this));
  };

  bzip_inflate = function(buf, cb) {
    var e, err, ret;
    err = null;
    try {
      ret = compressjs.Bzip2.decompressFile(buf);
      if (ret != null) {
        ret = new Buffer(ret);
      }
    } catch (_error) {
      e = _error;
      err = e;
    }
    return cb(err, ret);
  };

  Compressed = (function(_super) {
    __extends(Compressed, _super);

    Compressed.TAG = C.packet_tags.compressed;

    Compressed.prototype.TAG = Compressed.TAG;

    function Compressed(_arg) {
      this.algo = _arg.algo, this.compressed = _arg.compressed, this.inflated = _arg.inflated;
    }

    Compressed.parse = function(slice) {
      return (new CompressionParser(slice)).parse();
    };

    Compressed.prototype.inflate = function(cb) {
      var err, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          switch (_this.algo) {
            case C.compression.none:
              return __iced_k(ret = _this.compressed);
            case C.compression.zlib:
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
                  funcname: "Compressed.inflate"
                });
                zlib.inflate(_this.compressed, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return ret = arguments[1];
                    };
                  })(),
                  lineno: 56
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            case C.compression.zip:
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
                  funcname: "Compressed.inflate"
                });
                fake_zip_inflate(_this.compressed, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return ret = arguments[1];
                    };
                  })(),
                  lineno: 58
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            case C.compression.bzip:
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
                  funcname: "Compressed.inflate"
                });
                bzip_inflate(_this.compressed, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return ret = arguments[1];
                    };
                  })(),
                  lineno: 60
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            default:
              return __iced_k(err = new Error("no known inflation -- algo: " + _this.algo));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    Compressed.prototype.deflate = function(cb) {
      var err, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          switch (_this.algo) {
            case C.compression.none:
              return __iced_k(ret = _this.inflated);
            case C.compression.zlib:
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
                  funcname: "Compressed.deflate"
                });
                zlib.deflate(_this.inflated, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return ret = arguments[1];
                    };
                  })(),
                  lineno: 72
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            case C.compression.zip:
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
                  funcname: "Compressed.deflate"
                });
                fake_zip_deflate(_this.inflated, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return ret = arguments[1];
                    };
                  })(),
                  lineno: 74
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
              break;
            default:
              return __iced_k(err = new Error("no known deflation -- algo: " + _this.algo));
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    Compressed.prototype.write_unframed = function(cb) {
      var bufs, err, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      bufs = [uint_to_buffer(8, this.algo)];
      (function(_this) {
        return (function(__iced_k) {
          if (_this.inflated != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
                funcname: "Compressed.write_unframed"
              });
              _this.deflate(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    err = arguments[0];
                    return __slot_1.compressed = arguments[1];
                  };
                })(_this),
                lineno: 85
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(bufs.push(_this.compressed));
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          ret = Buffer.concat(bufs);
          return cb(err, ret);
        };
      })(this));
    };

    Compressed.prototype.new_xbt = function() {
      return new XbtOut({
        packet: this
      });
    };

    Compressed.new_xbt_parser = function(arg) {
      return new XbtIn(arg);
    };

    return Compressed;

  })(Packet);

  CompressionParser = (function() {
    function CompressionParser(slice) {
      this.slice = slice;
    }

    CompressionParser.prototype.parse = function() {
      var algo, compressed;
      algo = this.slice.read_uint8();
      compressed = this.slice.consume_rest_to_buffer();
      return new Compressed({
        algo: algo,
        compressed: compressed
      });
    };

    return CompressionParser;

  })();

  exports.XbtOut = XbtOut = (function(_super) {
    __extends(XbtOut, _super);

    function XbtOut() {
      return XbtOut.__super__.constructor.apply(this, arguments);
    }

    XbtOut.prototype._v_init = function(cb) {
      var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
            funcname: "XbtOut._v_init"
          });
          XbtOut.__super__._v_init.call(_this, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return data = arguments[1];
              };
            })(),
            lineno: 117
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            err = _this._setup_stream();
          }
          return cb(err, data);
        };
      })(this));
    };

    XbtOut.prototype._setup_stream = function() {
      var err;
      this._stream = (function() {
        switch (this.packet().algo) {
          case C.compression.zlib:
            return new ReverseAdapter({
              stream: zlib.createDeflate()
            });
          default:
            err = new Error("unhandled streaming compression algorithm: " + this.packet.algo);
            return null;
        }
      }).call(this);
      return err;
    };

    XbtOut.prototype._v_chunk = function(_arg, cb) {
      var data, eof, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      data = _arg.data, eof = _arg.eof;
      esc = make_esc(cb, "compresed.XbtOut._v_chunk");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
            funcname: "XbtOut._v_chunk"
          });
          _this._stream.chunk({
            data: data,
            eof: eof
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 131
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return XbtOut.__super__._v_chunk.call(_this, {
            data: data,
            eof: eof
          }, cb);
        };
      })(this));
    };

    return XbtOut;

  })(Packetizer);

  XbtIn = (function(_super) {
    __extends(XbtIn, _super);

    function XbtIn(arg) {
      XbtIn.__super__.constructor.call(this, arg);
      this._inflate_stream = null;
    }

    XbtIn.prototype._parse_header = function(cb) {
      var algo, err, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      esc = make_esc(cb, "_parse_header");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
            funcname: "XbtIn._parse_header"
          });
          _this._read_uint8(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return algo = arguments[0];
              };
            })(),
            lineno: 149
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this._inflate_stream = (function() {
            switch (algo) {
              case C.compression.zlib:
                return zlib.createInflate();
              default:
                return err = new Error("unhandled streaming inflation algorithn: " + algo);
            }
          })();
          return cb(err);
        };
      })(this));
    };

    XbtIn.prototype._run_body = function(cb) {
      var chain, demux_xbt, err, inflate_xbt, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      inflate_xbt = new ReverseAdapter({
        stream: this._inflate_stream
      });
      demux_xbt = new this.demux_klass({});
      chain = new Chain([inflate_xbt, demux_xbt]);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/home/max/src/keybase/kbpgp/src/openpgp/packet/compressed.iced",
            funcname: "XbtIn._run_body"
          });
          _this._stream_to(chain, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 162
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    return XbtIn;

  })(PacketParser);

  exports.Compressed = Compressed;

}).call(this);
