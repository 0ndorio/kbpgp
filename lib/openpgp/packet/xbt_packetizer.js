// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var Packetizer, iced, test, util, xbt, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  xbt = require('../../xbt');

  util = require('../util');

  exports.Packetizer = Packetizer = (function(_super) {
    __extends(Packetizer, _super);

    function Packetizer(_arg) {
      var log2_chunksz, packet;
      log2_chunksz = _arg.log2_chunksz, packet = _arg.packet;
      log2_chunksz || (log2_chunksz = 16);
      this._chunksz = 1 << log2_chunksz;
      this._prefix = new Buffer([0xe0 | log2_chunksz]);
      this._buffers = [];
      this._packet = packet;
      this._dlen = 0;
      Packetizer.__super__.constructor.call(this);
    }

    Packetizer.prototype._push_to_buffer = function(b) {
      if ((b != null) && b.length) {
        this._buffers.push(b);
        return this._dlen += b.length;
      }
    };

    Packetizer.prototype._v_init = function(cb) {
      var buf, err, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this._packet != null) {
            ret = _this._packet.tagbuf();
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_packetizer.iced",
                funcname: "Packetizer._v_init"
              });
              _this._packet.write_unframed(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return buf = arguments[1];
                  };
                })(),
                lineno: 32
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err == null ? _this._push_to_buffer(buf) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ret);
        };
      })(this));
    };

    Packetizer.prototype._v_chunk = function(_arg, cb) {
      var bufs, data, eof;
      data = _arg.data, eof = _arg.eof;
      bufs = [];
      if (data != null) {
        this._handle_data(data, bufs);
      }
      if (eof) {
        this._handle_flush(bufs);
      }
      return cb(null, Buffer.concat(bufs));
    };

    Packetizer.prototype._handle_data = function(data, bufs) {
      var end, flat, pos, rest;
      this._push_to_buffer(data);
      if (this._dlen >= this._chunksz) {
        flat = Buffer.concat(this._buffers);
        pos = 0;
        while ((end = pos + this._chunksz) <= this._dlen) {
          bufs.push(this._prefix);
          bufs.push(flat.slice(pos, end));
          pos = end;
        }
        rest = flat.slice(pos);
        this._buffers = [rest];
        return this._dlen = rest.length;
      }
    };

    Packetizer.prototype._handle_flush = function(bufs) {
      var buf;
      if (this._dlen > 0) {
        buf = Buffer.concat(this._buffers);
        this._buffers = [];
        bufs.push(util.encode_length(buf.length));
        bufs.push(buf);
        return this._dlen = 0;
      }
    };

    return Packetizer;

  })(xbt.SimpleInit);

  test = function() {
    var buf, x, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    buf = Buffer.concat((function() {
      var _i, _j, _results, _results1;
      _results = [];
      for (_i = 0; _i < 16; _i++) {
        _results.push(new Buffer((function() {
          _results1 = [];
          for (_j = 32; _j < 61; _j++){ _results1.push(_j); }
          return _results1;
        }).apply(this)));
      }
      return _results;
    })());
    x = new Transform({
      log2_chunksz: 5,
      tag: 0x33,
      header: new Buffer("hello")
    });
    x.pipe(process.stdout);
    x.on('end', function() {
      return console.error("ok done!");
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_packetizer.iced"
        });
        x.write(buf, __iced_deferrals.defer({
          lineno: 71
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/xbt_packetizer.iced"
        });
        x.end(__iced_deferrals.defer({
          lineno: 72
        }));
        __iced_deferrals._fulfill();
      };
    })(this));
  };

}).call(this);
