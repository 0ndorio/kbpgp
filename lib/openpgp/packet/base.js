// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var C, Packet, iced, packetsigs, stream, util, __iced_k, __iced_k_noop;

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  util = require('../util');

  C = require('../../const').openpgp;

  packetsigs = require('./packetsigs');

  stream = require('stream');

  Packet = (function() {
    function Packet() {
      this._psc = new packetsigs.Collection();
    }

    Packet.prototype.tagbuf = function(tag) {
      tag || (tag = this.TAG);
      return new Buffer([0xc0 | tag]);
    };

    Packet.prototype.frame_packet = function(tag, body) {
      var bufs;
      bufs = [this.tagbuf(tag), util.encode_length(body.length), body];
      return Buffer.concat(bufs);
    };

    Packet.prototype.write = function(cb) {
      var err, raw, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
            funcname: "Packet.write"
          });
          _this.write_unframed(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return raw = arguments[1];
              };
            })(),
            lineno: 34
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err == null) {
            ret = _this.frame_packet(_this.TAG, raw);
          }
          return cb(err, ret);
        };
      })(this));
    };

    Packet.prototype.set = function(d) {
      var k, v, _results;
      _results = [];
      for (k in d) {
        v = d[k];
        _results.push(this[k] = v);
      }
      return _results;
    };

    Packet.prototype.is_signature = function() {
      return false;
    };

    Packet.prototype.is_key_material = function() {
      return false;
    };

    Packet.prototype.is_duplicate_primary = function() {
      return false;
    };

    Packet.prototype.to_userid = function() {
      return null;
    };

    Packet.prototype.to_user_attribute = function() {
      return null;
    };

    Packet.prototype.to_literal = function() {
      return null;
    };

    Packet.prototype.to_esk_packet = function() {
      return null;
    };

    Packet.prototype.to_enc_data_packet = function() {
      return null;
    };

    Packet.prototype.replay = function() {
      return this.frame_packet(this.tag, this.raw);
    };

    Packet.prototype.inflate = function(cb) {
      return cb(null, null);
    };

    Packet.prototype.push_sig = function(packetsig) {
      return this._psc.push(packetsig);
    };

    Packet.prototype.get_psc = function() {
      return this._psc;
    };

    Packet.prototype.get_data_signer = function() {
      return this.get_psc().get_data_signer();
    };

    Packet.prototype.get_data_signers = function() {
      return this.get_psc().get_data_signers();
    };

    Packet.prototype.get_signed_userids = function() {
      return [];
    };

    Packet.prototype.get_subkey_binding = function() {
      return null;
    };

    Packet.prototype.is_self_signed = function() {
      return false;
    };

    return Packet;

  })();

  exports.Packet = Packet;

}).call(this);
