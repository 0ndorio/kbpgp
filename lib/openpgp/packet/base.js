// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var C, Packet, PacketizedOutStream, PacketizerStream, iced, packetsigs, stream, util, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  util = require('../util');

  C = require('../../const').openpgp;

  packetsigs = require('./packetsigs');

  stream = require('stream');

  PacketizerStream = require('./packetizer_stream').PacketizerStream;

  Packet = (function() {
    function Packet() {
      this._psc = new packetsigs.Collection();
    }

    Packet.prototype.tagbuf = function(tag) {
      tag || (tag = this.TAG);
      return new Buffer([0xc0 | tag]);
    };

    Packet.prototype.frame_packet = function(tag, body) {
      var bufs;
      bufs = [this.tagbuf(), util.encode_length(body.length), body];
      return Buffer.concat(bufs);
    };

    Packet.prototype.write = function(cb) {
      var err, raw, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = ret = null;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
            funcname: "Packet.write"
          });
          _this.write_unframed(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return raw = arguments[1];
              };
            })(),
            lineno: 35
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err == null) {
            ret = _this.frame_packet(_this.TAG, raw);
          }
          return cb(err, ret);
        };
      })(this));
    };

    Packet.prototype.set = function(d) {
      var k, v, _results;
      _results = [];
      for (k in d) {
        v = d[k];
        _results.push(this[k] = v);
      }
      return _results;
    };

    Packet.prototype.is_signature = function() {
      return false;
    };

    Packet.prototype.is_key_material = function() {
      return false;
    };

    Packet.prototype.is_duplicate_primary = function() {
      return false;
    };

    Packet.prototype.to_userid = function() {
      return null;
    };

    Packet.prototype.to_user_attribute = function() {
      return null;
    };

    Packet.prototype.to_literal = function() {
      return null;
    };

    Packet.prototype.to_esk_packet = function() {
      return null;
    };

    Packet.prototype.to_enc_data_packet = function() {
      return null;
    };

    Packet.prototype.replay = function() {
      return this.frame_packet(this.tag, this.raw);
    };

    Packet.prototype.inflate = function(cb) {
      return cb(null, null);
    };

    Packet.prototype.push_sig = function(packetsig) {
      return this._psc.push(packetsig);
    };

    Packet.prototype.get_psc = function() {
      return this._psc;
    };

    Packet.prototype.get_data_signer = function() {
      return this.get_psc().get_data_signer();
    };

    Packet.prototype.get_data_signers = function() {
      return this.get_psc().get_data_signers();
    };

    Packet.prototype.get_signed_userids = function() {
      return [];
    };

    Packet.prototype.get_subkey_binding = function() {
      return null;
    };

    Packet.prototype.is_self_signed = function() {
      return false;
    };

    return Packet;

  })();

  exports.PacketizedOutStream = PacketizedOutStream = (function(_super) {
    __extends(PacketizedOutStream, _super);

    function PacketizedOutStream(_arg) {
      this.header = _arg.header;
      this._did_header_stream = false;
      this._ps = PacketizerStream.substream(this);
      PacketizedOutStream.__super__.constructor.call(this);
    }

    PacketizedOutStream.prototype._stream_header = function(cb) {
      var err, hbuf, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this.header && !_this._did_header_stream) {
            _this._did_header_stream = true;
            _this.push(_this.header.tagbuf());
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
                funcname: "PacketizedOutStream._stream_header"
              });
              _this.header.write_unframed(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return hbuf = arguments[1];
                  };
                })(),
                lineno: 118
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (err != null) {
                  return __iced_k(_this.emit('error', err));
                } else {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
                      funcname: "PacketizedOutStream._stream_header"
                    });
                    _this._ps.write(hbuf, __iced_deferrals.defer({
                      lineno: 120
                    }));
                    __iced_deferrals._fulfill();
                  })(__iced_k);
                }
              })(__iced_k);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    PacketizedOutStream.prototype._transform = function(buf, encoding, cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
            funcname: "PacketizedOutStream._transform"
          });
          _this._stream_header(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 126
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeof err === "undefined" || err === null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
                  funcname: "PacketizedOutStream._transform"
                });
                _this._v_transform(buf, encoding, __iced_deferrals.defer({
                  lineno: 128
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb();
          });
        };
      })(this));
    };

    PacketizedOutStream.prototype._flush = function(cb) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
            funcname: "PacketizedOutStream._flush"
          });
          _this._stream_header(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 134
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (typeof err === "undefined" || err === null) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/base.iced",
                  funcname: "PacketizedOutStream._flush"
                });
                _this._v_flush(__iced_deferrals.defer({
                  lineno: 136
                }));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(function() {
            return cb();
          });
        };
      })(this));
    };

    return PacketizedOutStream;

  })(stream.Transform);

  exports.Packet = Packet;

}).call(this);
