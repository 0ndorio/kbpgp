// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var InitableTransform, Transform, iced, test, util, __iced_k, __iced_k_noop,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  InitableTransform = require('../../stream').InitableTransform;

  util = require('../util');

  exports.PacketizerStream = Transform = (function(_super) {
    __extends(Transform, _super);

    function Transform(_arg) {
      var header, log2_chunksz, packet, tag;
      tag = _arg.tag, log2_chunksz = _arg.log2_chunksz, header = _arg.header, packet = _arg.packet;
      log2_chunksz || (log2_chunksz = 16);
      this._chunksz = 1 << log2_chunksz;
      this._prefix = new Buffer([0xe0 | log2_chunksz]);
      this._buffers = [];
      this._packet = packet;
      this._tag = tag || (packet != null ? packet.TAG : void 0);
      this._dlen = 0;
      this._push_to_buffer(header);
      Transform.__super__.constructor.call(this);
    }

    Transform.prototype._push_to_buffer = function(b) {
      this._buffers.push(b);
      return this._dlen += b.length;
    };

    Transform.prototype._do_tag = function() {
      if (this._tag) {
        this.push(new Buffer([this._tag]));
        return this._tag = null;
      }
    };

    Transform.prototype._v_init = function(cb) {
      var buf, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this._do_tag();
      err = null;
      (function(_this) {
        return (function(__iced_k) {
          if (_this._packet != null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/packetizer_stream.iced",
                funcname: "Transform._v_init"
              });
              _this._packet.write_unframed(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return buf = arguments[1];
                  };
                })(),
                lineno: 38
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err == null ? _this._push_to_buffer(buf) : void 0);
            });
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Transform.prototype._v_transform = function(buf, encoding, cb) {
      var end, flat, pos, rest;
      this._push_to_buffer(buf);
      if (_dlen >= this._chunksz) {
        flat = Buffer.concat(this._buffers);
        pos = 0;
        while ((end = pos + this._chunksz) <= this._dlen) {
          this.push(this._prefix);
          this.push(flat.slice(pos, end));
          pos = end;
        }
        rest = flat.slice(pos);
        this._buffers = [rest];
        this._dlen = rest.length;
      }
      return cb();
    };

    Transform.prototype._v_flush = function(cb) {
      var buf;
      if (this.dlen > 0) {
        buf = Buffer.concat(this._buffers);
        this._buffers = [];
        this.push(util.encode_length(this._dlen));
        this.push(buf);
        this._dlen = 0;
      }
      return cb();
    };

    return Transform;

  })(InitableTransform);

  test = function() {
    var buf, x, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    buf = Buffer.concat((function() {
      var _i, _j, _results, _results1;
      _results = [];
      for (_i = 0; _i < 16; _i++) {
        _results.push(new Buffer((function() {
          _results1 = [];
          for (_j = 32; _j < 61; _j++){ _results1.push(_j); }
          return _results1;
        }).apply(this)));
      }
      return _results;
    })());
    x = new Transform({
      log2_chunksz: 5,
      tag: 0x33,
      header: new Buffer("hello")
    });
    x.pipe(process.stdout);
    x.on('end', function() {
      return console.error("ok done!");
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/packetizer_stream.iced"
        });
        x.write(buf, __iced_deferrals.defer({
          lineno: 73
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/keybase/kbpgp/src/openpgp/packet/packetizer_stream.iced"
        });
        x.end(__iced_deferrals.defer({
          lineno: 74
        }));
        __iced_deferrals._fulfill();
      };
    })(this));
  };

  test();

}).call(this);
