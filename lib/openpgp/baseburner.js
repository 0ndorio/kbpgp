// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var BaseBurner, OnePassSignature, PKESK, SEIPD, SHA512, clearsign, encode, export_key_pgp, get_cipher, iced, make_esc, __iced_k, __iced_k_noop, _ref, _ref1;

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  make_esc = require('iced-error').make_esc;

  OnePassSignature = require('./packet/one_pass_sig').OnePassSignature;

  _ref = require('../symmetric'), export_key_pgp = _ref.export_key_pgp, get_cipher = _ref.get_cipher;

  _ref1 = require('./packet/sess'), SEIPD = _ref1.SEIPD, PKESK = _ref1.PKESK;

  SHA512 = require('../hash').SHA512;

  encode = require('./armor').encode;

  clearsign = require('./clearsign');

  BaseBurner = require('./baseburner').BaseBurner;

  exports.BaseBurner = BaseBurner = (function() {
    function BaseBurner(_arg) {
      this.sign_with = _arg.sign_with, this.encrypt_for = _arg.encrypt_for, this.signing_key = _arg.signing_key, this.encryption_key = _arg.encryption_key;
      this.packets = [];
    }

    BaseBurner.prototype._find_keys = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "find_keys");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
            funcname: "BaseBurner._find_keys"
          });
          _this._find_signing_key(esc(__iced_deferrals.defer({
            lineno: 22
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
              funcname: "BaseBurner._find_keys"
            });
            _this._find_encryption_key(esc(__iced_deferrals.defer({
              lineno: 23
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
                funcname: "BaseBurner._find_keys"
              });
              _this._assert_one(esc(__iced_deferrals.defer({
                lineno: 24
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    BaseBurner.prototype._assert_one = function(cb) {
      var err;
      err = null;
      if (!(this.signing_key != null) && !(this.encryption_key != null)) {
        err = new Error("need either an encryption or signing key, or both");
      }
      return cb(err);
    };

    BaseBurner.prototype._find_signing_key = function(cb) {
      var err;
      err = null;
      if ((this.sign_with != null) && (this.signing_key != null)) {
        err = new Error("specify either `sign_with` or `signing_key` but not both");
      } else if ((this.sign_with != null) && ((this.signing_key = this.sign_with.find_signing_pgp_key()) == null)) {
        err = new Error("cannot sign with the given KeyManager");
      }
      return cb(err);
    };

    BaseBurner.prototype._find_encryption_key = function(cb) {
      var err;
      err = null;
      if ((this.encrypt_for != null) && (this.encryption_key != null)) {
        err = new Error("specify either `encrypt_for` or `encryption_key` but not both");
      } else if ((this.encrypt_for != null) && ((this.encryption_key = this.encrypt_for.find_crypt_pgp_key()) == null)) {
        err = new Error("cannot encrypt with the given KeyManager");
      }
      return cb(err);
    };

    BaseBurner.prototype._make_session_key = function(cb) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this._cipher_algo = C.symmetric_key_algorithms.AES256;
      this._cipher_info = get_cipher(this._cipher_algo);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
            funcname: "BaseBurner._make_session_key"
          });
          SRF().random_bytes(_this._cipher_info.key_size, __iced_deferrals.defer({
            assign_fn: (function(__slot_1) {
              return function() {
                return __slot_1._session_key = arguments[0];
              };
            })(_this),
            lineno: 60
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this._cipher = new _this._cipher_info.klass(WordArray.from_buffer(_this._session_key));
          return cb(null);
        };
      })(this));
    };

    BaseBurner.prototype._encrypt_session_key = function(cb) {
      var ekey, esc, fingerprint, key_id, payload, pkt, pub_k, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_encrypt_session_key");
      payload = export_key_pgp(this._cipher_algo, this._session_key);
      pub_k = this.encryption_key.key;
      fingerprint = this.encryption_key.get_fingerprint();
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
            funcname: "BaseBurner._encrypt_session_key"
          });
          pub_k.pad_and_encrypt(payload, {
            fingerprint: fingerprint
          }, esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ekey = arguments[0];
              };
            })(),
            lineno: 71
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            if (_this.opts.hide) {
              key_id = dummy_key_id;
              (function(__iced_k) {
                var _ref2, _ref3;
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
                  funcname: "BaseBurner._encrypt_session_key"
                });
                ekey.hide({
                  max: (_ref2 = _this.opts.hide) != null ? _ref2.max : void 0,
                  slosh: (_ref3 = _this.opts.hide) != null ? _ref3.slosh : void 0,
                  key: pub_k
                }, esc(__iced_deferrals.defer({
                  lineno: 74
                })));
                __iced_deferrals._fulfill();
              })(__iced_k);
            } else {
              return __iced_k(key_id = _this.encryption_key.get_key_id());
            }
          })(function() {
            pkt = new PKESK({
              crypto_type: pub_k.type,
              key_id: key_id,
              ekey: ekey
            });
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
                funcname: "BaseBurner._encrypt_session_key"
              });
              pkt.write(esc(__iced_deferrals.defer({
                assign_fn: (function(__slot_1) {
                  return function() {
                    return __slot_1._pkesk = arguments[0];
                  };
                })(_this),
                lineno: 82
              })));
              __iced_deferrals._fulfill();
            })(function() {
              return cb(null);
            });
          });
        };
      })(this));
    };

    BaseBurner.prototype._setup_encryption = function(cb) {
      var esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "_setup_encryption");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
            funcname: "BaseBurner._setup_encryption"
          });
          _this._make_session_key(esc(__iced_deferrals.defer({
            lineno: 89
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
              funcname: "BaseBurner._setup_encryption"
            });
            _this._encrypt_session_key(esc(__iced_deferrals.defer({
              lineno: 90
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(null, _this._pkesk);
          });
        };
      })(this));
    };

    BaseBurner.prototype._sign_preamble = function(cb) {
      var esc, ops, ops_framed, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      esc = make_esc(cb, "Burner::_sign'");
      ops = new OnePassSignature({
        sig_type: C.sig_types.binary_doc,
        hasher: this.hasher || SHA512,
        sig_klass: this.signing_key.get_klass(),
        key_id: this.signing_key.get_key_id(),
        is_final: 1
      });
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/openpgp/baseburner.iced",
            funcname: "BaseBurner._sign_preamble"
          });
          ops.write(esc(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return ops_framed = arguments[0];
              };
            })(),
            lineno: 104
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, ops_framed);
        };
      })(this));
    };

    return BaseBurner;

  })();

}).call(this);
