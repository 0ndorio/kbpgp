// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var C, S2K, SHA1, SHA224, SHA256, SHA512, WordArray, s2k, triplesec, _ref;



  triplesec = require('triplesec');

  C = require('./const');

  WordArray = triplesec.WordArray;

  _ref = triplesec.hash, SHA1 = _ref.SHA1, SHA224 = _ref.SHA224, SHA256 = _ref.SHA256, SHA512 = _ref.SHA512;

  S2K = (function() {
    S2K.prototype._count = function(c, bias) {
      return (16 + (c & 15)) << ((c >> 4) + bias);
    };

    function S2K() {
      this.hash_class = SHA256;
    }

    S2K.prototype.set_hash_algorithm = function(which) {
      return this.hash_class = (function() {
        switch (which) {
          case C.SHA1:
            return SHA1;
          case C.SHA224:
            return SHA224;
          case C.SHA256:
            return SHA256;
          case C.SHA512:
            return SHA512;
          default:
            console.warn("No such hash: " + which + "; defaulting to SHA-256");
            return SHA256;
        }
      })();
    };

    S2K.prototype.hash = function(input) {
      return (new this.hash_class).finalize(WordArray.from_buffer(input)).to_buffer();
    };

    S2K.prototype.read = function(input, position) {
      var c, gnuExtType, match, mypos;
      mypos = position;
      this.type = input.readUInt8(mypos++);
      match = false;
      switch (this.type) {
        case 0:
          this.set_hash_algorithm(input.readUInt8(mypos++));
          this.s2kLength = 1;
          match = true;
          break;
        case 1:
          this.set_hash_algorithm(input.readUInt8(mypos++));
          this.saltValue = input.slice(mypos, mypos + 8);
          mypos += 8;
          this.s2kLength = 9;
          match = true;
          break;
        case 3:
          this.set_hash_algorithm(input.readUInt8(mypos++));
          this.saltValue = input.slice(mypos, mypos + 8);
          mypos += 8;
          this.s2kLength = 9;
          this.EXPBIAS = 6;
          c = input.readUInt8(mypos++);
          this.count = this._count(c, this.EXPBIAS);
          this.s2kLength = 10;
          match = true;
          break;
        case 101:
          if (input.slice(mypos + 1, mypos + 4) === "GNU") {
            this.set_hash_algorithm(input.readUInt8(mypos++));
            mypos += 3;
            gnuExtType = 1000 + input.readUInt8(mypos++);
            match = true;
            if (gnuExtType === 1001) {
              this.type = gnuExtType;
              this.s2kLength = 5;
            } else {
              console.warn("unknown s2k gnu protection mode! " + gnuExtType);
            }
          }
      }
      if (!match) {
        console.warn("unknown s2k type! " + this.type);
        return null;
      } else {
        return this;
      }
    };

    S2K.prototype.write = function(passphrase, salt, c) {
      var type;
      this.type = type = 3;
      this.salt = salt;
      this.count = this._count(c, 6);
      this.set_hash_algorithm(C.SHA256);
      this.s2kLength = 10;
      return this.produce_key(passphrase);
    };

    S2K.prototype.produce_key = function(passphrase, numBytes) {
      var i, isp, key, n, seed;
      switch (this.type) {
        case 0:
          return this.hash(passphrase);
        case 1:
          return this.hash(Buffer.concat([this.salt, passphrase]));
        case 3:
          seed = Buffer.concat([this.salt, passphrase]);
          n = Math.ceil(this.count / seed.length);
          isp = Buffer.concat((function() {
            var _i, _results;
            _results = [];
            for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
              _results.push(seed);
            }
            return _results;
          })()).slice(0, this.count);
          if ((numBytes != null) && (numBytes === 24 || numBytes === 34)) {
            key = this.hash(isp);
            return Buffer.concat([key, this.hash(Buffer.concat([new Buffer([0]), isp]))]);
          } else {
            return this.hash(isp);
          }
          break;
        default:
          return null;
      }
    };

    return S2K;

  })();

  s2k = new S2K();

  console.log(s2k.write(new Buffer("shit on me XXyy"), new Buffer([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2048));

}).call(this);
