// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var ASP, BaseKeyPair, BigInteger, C, K, MRF, Pair, Pub, SRF, SlicerBuffer, alloc_by_oid, bn, bufeq_secure, iced, konst, make_esc, nbits, nbv, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-runtime').iced;
  __iced_k = __iced_k_noop = function() {};

  bn = require('../bn');

  nbits = bn.nbits, nbv = bn.nbv, BigInteger = bn.BigInteger;

  _ref = require('../rand'), SRF = _ref.SRF, MRF = _ref.MRF;

  _ref1 = require('../util'), bufeq_secure = _ref1.bufeq_secure, ASP = _ref1.ASP;

  make_esc = require('iced-error').make_esc;

  konst = require('../const');

  C = konst.openpgp;

  K = konst.kb;

  BaseKeyPair = require('../basekeypair').BaseKeyPair;

  SlicerBuffer = require('../openpgp/buffer').SlicerBuffer;

  alloc_by_oid = require('./curves').alloc_by_oid;

  Pub = (function() {
    Pub.type = C.public_key_algorithms.ECDSA;

    Pub.prototype.type = Pub.type;

    function Pub(_arg) {
      this.curve = _arg.curve, this.R = _arg.R;
    }

    Pub._parse = function(raw) {
      var R, curve, err, l, len, oid, pre, pub, sb, _ref2, _ref3;
      sb = new SlicerBuffer(raw);
      pre = sb.rem();
      l = sb.read_uint8();
      oid = sb.read_buffer(l);
      _ref2 = alloc_by_oid(oid), err = _ref2[0], curve = _ref2[1];
      if (err != null) {
        throw err;
      }
      _ref3 = curve.mpi_point_from_slicer_buffer(sb), err = _ref3[0], R = _ref3[1];
      if (err != null) {
        throw err;
      }
      len = pre - sb.rem();
      pub = new Pub({
        curve: curve,
        R: R
      });
      return [pub, len];
    };

    Pub.parse = function(raw) {
      var e, err, len, pub, _ref2;
      pub = len = err = null;
      try {
        _ref2 = Pub._parse(raw), pub = _ref2[0], len = _ref2[1];
      } catch (_error) {
        e = _error;
        err = e;
      }
      return [err, pub, len];
    };

    Pub.alloc = function(raw) {
      return Pub.parse(raw);
    };

    Pub.prototype.nbits = function() {
      return this.curve.nbits();
    };

    Pub.prototype.verify = function(_arg, h, cb) {
      var err, hi, r, s, u1, u2, v, w;
      r = _arg[0], s = _arg[1];
      err = null;
      hi = this.trunc_hash(h);
      w = s.modInverse(this.q);
      u1 = hi.multiply(w).mod(this.q);
      u2 = r.multiply(w).mod(this.q);
      v = this.g.modPow(u1, this.p).multiply(this.y.modPow(u2, this.p)).mod(this.p).mod(this.q);
      if (!v.equals(r)) {
        err = new Error("verification failed");
      }
      return cb(err);
    };

    return Pub;

  })();

  Pair = (function(_super) {
    __extends(Pair, _super);

    Pair.Pub = Pub;

    Pair.prototype.Pub = Pub;

    Pair.type = C.public_key_algorithms.ECDSA;

    Pair.prototype.type = Pair.type;

    function Pair(_arg) {
      var priv, pub;
      pub = _arg.pub, priv = _arg.priv;
      Pair.__super__.constructor.call(this, {
        pub: pub,
        priv: priv
      });
    }

    Pair.parse = function(pub_raw) {
      return BaseKeyPair.parse(Pair, pub_raw);
    };

    Pair.prototype.can_encrypt = function() {
      return false;
    };

    Pair.prototype.fulfills_flags = function(flags) {
      var good_for;
      good_for = C.key_flags.certify_keys | C.key_flags.sign_data;
      return (flags & good_for) === flags;
    };

    Pair.prototype.verify_unpad_and_check_hash = function(_arg, cb) {
      var data, err, hash, hasher, sig, v, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref2;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      sig = _arg.sig, data = _arg.data, hasher = _arg.hasher, hash = _arg.hash;
      err = null;
      if (Buffer.isBuffer(sig)) {
        _ref2 = Pair.read_sig_from_buf(sig), err = _ref2[0], sig = _ref2[1];
      }
      hash || (hash = hasher(data));
      (function(_this) {
        return (function(__iced_k) {
          if (sig.length !== 2) {
            return __iced_k(err = new Error("Expected 2 Bigints in the signature"));
          } else {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/keybase/kbpgp/src/ecc/ecdsa.iced",
                funcname: "Pair.verify_unpad_and_check_hash"
              });
              _this.pub.verify(sig, hash, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return v = arguments[1];
                  };
                })(),
                lineno: 104
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          }
        });
      })(this)((function(_this) {
        return function() {
          return cb(err);
        };
      })(this));
    };

    Pair.prototype.pad_and_sign = function(data, _arg, cb) {
      var h, hasher, s, sig, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      hasher = _arg.hasher;
      hasher || (hasher = SHA512);
      h = hasher(data);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/keybase/kbpgp/src/ecc/ecdsa.iced",
            funcname: "Pair.pad_and_sign"
          });
          _this.priv.sign(h, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return sig = arguments[0];
              };
            })(),
            lineno: 113
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(Buffer.concat((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = sig.length; _i < _len; _i++) {
              s = sig[_i];
              _results.push(s.to_mpi_buffer());
            }
            return _results;
          })()));
        };
      })(this));
    };

    Pair.parse_sig = function(slice) {
      var buf, err, n, ret, _ref2;
      buf = slice.peek_rest_to_buffer();
      _ref2 = Pair.read_sig_from_buf(buf), err = _ref2[0], ret = _ref2[1], n = _ref2[2];
      if (err != null) {
        throw err;
      }
      slice.advance(n);
      return ret;
    };

    Pair.read_sig_from_buf = function(buf) {
      var err, n, o, order, orig_len, ret, x;
      orig_len = buf.length;
      order = ['r', 's'];
      err = null;
      ret = (function() {
        var _i, _len, _ref2, _results;
        _results = [];
        for (_i = 0, _len = order.length; _i < _len; _i++) {
          o = order[_i];
          if (!(err == null)) {
            continue;
          }
          _ref2 = bn.mpi_from_buffer(buf), err = _ref2[0], x = _ref2[1], buf = _ref2[2];
          _results.push(x);
        }
        return _results;
      })();
      n = orig_len - buf.length;
      return [err, ret, n];
    };

    return Pair;

  })(BaseKeyPair);

  exports.ECDSA = exports.Pair = Pair;

}).call(this);
