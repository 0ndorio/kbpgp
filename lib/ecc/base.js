// Generated by IcedCoffeeScript 1.7.1-c
(function() {
  var BaseEccKey, SlicerBuffer, alloc_by_oid;

  SlicerBuffer = require('../openpgp/buffer').SlicerBuffer;

  alloc_by_oid = require('./curves').alloc_by_oid;

  exports.BaseEccKey = BaseEccKey = (function() {
    function BaseEccKey(_arg) {
      this.curve = _arg.curve, this.R = _arg.R;
    }

    BaseEccKey.prototype.serialize = function() {
      var oid;
      oid = this.curve.oid;
      console.log([new Buffer([oid.length]), oid, this.curve.point_to_mpi_buffer(this.R)]);
      return Buffer.concat([new Buffer([oid.length]), oid, this.curve.point_to_mpi_buffer(this.R)]);
    };

    BaseEccKey._alloc = function(klass, raw) {
      var R, curve, err, l, len, oid, pre, pub, sb, _ref, _ref1;
      sb = new SlicerBuffer(raw);
      pre = sb.rem();
      l = sb.read_uint8();
      oid = sb.read_buffer(l);
      _ref = alloc_by_oid(oid), err = _ref[0], curve = _ref[1];
      if (err != null) {
        throw err;
      }
      _ref1 = curve.mpi_point_from_slicer_buffer(sb), err = _ref1[0], R = _ref1[1];
      if (err != null) {
        throw err;
      }
      pub = new klass({
        curve: curve,
        R: R
      });
      pub.read_params(sb);
      len = pre - sb.rem();
      return [pub, len];
    };

    BaseEccKey.alloc = function(klass, raw) {
      var e, err, len, pub, _ref;
      pub = len = err = null;
      try {
        _ref = BaseEccKey._alloc(klass, raw), pub = _ref[0], len = _ref[1];
      } catch (_error) {
        e = _error;
        err = e;
      }
      return [err, pub, len];
    };

    return BaseEccKey;

  })();

}).call(this);
