// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var C, SHA512, bufeq_secure, emsa_pkcs1_decode, emsa_pkcs1_encode, hash_headers, nbs;



  SHA512 = require('../hash').SHA512;

  C = require('../const').openpgp;

  nbs = require('../bn').nbs;

  bufeq_secure = require('../util').bufeq_secure;

  hash_headers = {
    SHA1: [0x30, 0x21, 0x30, 0x09, 0x06, 0x05, 0x2b, 0x0e, 0x03, 0x02, 0x1a, 0x05, 0x00, 0x04, 0x14],
    SHA224: [0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x04, 0x05, 0x00, 0x04, 0x1C],
    SHA256: [0x30, 0x31, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20],
    SHA512: [0x30, 0x51, 0x30, 0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x03, 0x05, 0x00, 0x04, 0x40]
  };

  exports.emsa_pkcs1_encode = emsa_pkcs1_encode = function(hashed_data, len, opts) {
    var buf, hash, headers, i, n;
    if (opts == null) {
      opts = {};
    }
    hash = opts.hash || SHA512;
    headers = hash_headers[hash.algname];
    n = len - headers.length - 3 - hash.output_length;
    buf = Buffer.concat([
      new Buffer([0x00, 0x01]), new Buffer((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= n ? _i < n : _i > n; i = 0 <= n ? ++_i : --_i) {
          _results.push(0xff);
        }
        return _results;
      })()), new Buffer([0x00]), new Buffer(headers), hashed_data
    ]);
    return nbs(new Uint8Array(buf), 256);
  };

  exports.emsa_pkcs1_decode = emsa_pkcs1_decode = function(v, hash_alg) {
    var err, h, header, i, ret;
    err = ret = null;
    i = 0;
    if (v.length < 2) {
      err = new Error("signature was way too short: < 2 bytes");
    } else {
      if (v.readUInt8(i) === 0) {
        i++;
      }
      if (v.readUInt8(i++) !== 1) {
        err = new Error("Didn't get two-byte header 0x00 0x01");
      } else {
        while (i < v.length && (v.readUInt8(i) === 0xff)) {
          i++;
        }
        if (i >= v.length || v.readUInt8(i) !== 0) {
          err = new Error("Missed the 0x0 separator");
        } else {
          i++;
          header = hash_headers[hash_alg.algname];
          if (!bufeq_secure(new Buffer(header), v.slice(i, header.length + i))) {
            err = new Error("missing ASN header for " + hash_alg.algname);
          } else {
            i += header.length;
            h = v.slice(i);
            if (h.length !== hash_alg.output_length) {
              err = new Error("trailing garbage in signature");
            } else {
              ret = h;
            }
          }
        }
      }
    }
    return [err, ret];
  };

}).call(this);
