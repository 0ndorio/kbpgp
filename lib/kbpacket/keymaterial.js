// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var K, KeyMaterial, Packet, SHA512, bencode, iced, make_esc, native_rng, pack, rsa, sign, triplesec, verify, __iced_k, __iced_k_noop, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  K = require('../const').kb;

  triplesec = require('triplesec');

  SHA512 = require('../hash').SHA512;

  native_rng = triplesec.prng.native_rng;

  Packet = require('./base').Packet;

  _ref = require('./encode'), pack = _ref.pack, bencode = _ref.bencode;

  make_esc = require('iced-error').make_esc;

  rsa = require('../rsa');

  _ref1 = require('../sign'), sign = _ref1.sign, verify = _ref1.verify;

  KeyMaterial = (function(_super) {
    __extends(KeyMaterial, _super);

    function KeyMaterial(_arg) {
      this.key = _arg.key, this.timestamp = _arg.timestamp, this.userid = _arg.userid, this.passphrase = _arg.passphrase, this.sig = _arg.sig, this.rawkey = _arg.rawkey;
      KeyMaterial.__super__.constructor.call(this);
    }

    KeyMaterial.prototype._write_public = function() {
      var pub;
      pub = this.key.pub.serialize();
      return {
        type: this.key.type,
        pub: pub,
        timestamp: this.timestamp
      };
    };

    KeyMaterial.prototype.write_public = function() {
      var body;
      body = this._write_public();
      return this.frame_packet(K.packet_tags.public_key, body);
    };

    KeyMaterial.prototype.write_private = function(_arg, cb) {
      var err, progress_hook, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      progress_hook = _arg.progress_hook;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/kbpacket/keymaterial.iced",
          funcname: "KeyMaterial.write_private"
        });
        _this._write_private({
          progress_hook: progress_hook
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return ret = arguments[1];
            };
          })(),
          lineno: 32
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (typeof ret !== "undefined" && ret !== null) {
          ret = _this.frame_packet(K.packet_tags.public_key, ret);
        }
        return cb(err, ret);
      });
    };

    KeyMaterial.prototype._write_private = function(_arg, cb) {
      var epriv, err, priv, progress_hook, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      progress_hook = _arg.progress_hook;
      ret = this._write_public();
      priv = this.key.priv.serialize();
      (function(__iced_k) {
        if (_this.passphrase != null) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/kbpacket/keymaterial.iced",
              funcname: "KeyMaterial._write_private"
            });
            triplesec.encrypt({
              key: _this.passphrase,
              data: priv,
              progress_hook: progress_hook
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return epriv = arguments[1];
                };
              })(),
              lineno: 43
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(typeof err !== "undefined" && err !== null ? ret = null : ret.priv = {
              data: epriv,
              encryption: K.key_encryption.triplesec_v1
            });
          });
        } else {
          return __iced_k(ret.priv = {
            data: priv,
            encryption: K.key_encryption.none
          });
        }
      })(function() {
        return cb(err, ret);
      });
    };

    KeyMaterial.prototype._encode_keys = function(_arg, sig, cb) {
      var err, priv, private_key, progress_hook, pub, public_key, ret, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      progress_hook = _arg.progress_hook;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/kbpacket/keymaterial.iced",
          funcname: "KeyMaterial._encode_keys"
        });
        _this._write_private({
          progress_hook: progress_hook
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return priv = arguments[1];
            };
          })(),
          lineno: 59
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _ref2;
        pub = _this._write_public();
        ret = null;
        _ref2 = K.message_types, private_key = _ref2.private_key, public_key = _ref2.public_key;
        if (typeof err === "undefined" || err === null) {
          ret = {
            "private": bencode(private_key, {
              sig: sig,
              userid: _this.userid,
              key: priv
            }),
            "public": bencode(public_key, {
              sig: sig,
              userid: _this.userid,
              key: pub
            })
          };
        }
        return cb(err, ret);
      });
    };

    KeyMaterial.prototype._self_sign_key = function(_arg, cb) {
      var body, err, hash, progress_hook, res, type, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      hash = _arg.hash, progress_hook = _arg.progress_hook;
      if (hash == null) {
        hash = SHA512;
      }
      type = K.signatures.self_sign_key;
      body = this._self_sign_body();
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/kbpacket/keymaterial.iced",
          funcname: "KeyMaterial._self_sign_key"
        });
        sign({
          key: _this.key,
          type: type,
          body: body,
          hash: hash,
          progress_hook: progress_hook
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return res = arguments[1];
            };
          })(),
          lineno: 76
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err, res);
      });
    };

    KeyMaterial.prototype._self_sign_body = function() {
      return {
        userid: this.userid,
        key: this._write_public()
      };
    };

    KeyMaterial.prototype.export_keys = function(_arg, cb) {
      var armor, err, progress_hook, ret, sig, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      armor = _arg.armor, progress_hook = _arg.progress_hook;
      ret = err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/kbpacket/keymaterial.iced",
          funcname: "KeyMaterial.export_keys"
        });
        _this._self_sign_key({
          progress_hook: progress_hook
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return sig = arguments[1];
            };
          })(),
          lineno: 87
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "src/kbpacket/keymaterial.iced",
                funcname: "KeyMaterial.export_keys"
              });
              _this._encode_keys({
                progress_hook: progress_hook
              }, sig, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return ret = arguments[1];
                  };
                })(),
                lineno: 89
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          return cb(err, ret);
        });
      });
    };

    KeyMaterial.alloc = function(secret_tag, o) {
      var e, err, ret;
      ret = null;
      try {
        ret = new KeyMaterial({
          userid: o.userid,
          timestamp: o.key.timestamp,
          rawkey: {
            type: o.key.type,
            pub: o.key.pub,
            priv: o.key.priv
          },
          sig: o.sig
        });
        if (secret_tag && (ret.rawkey.priv == null)) {
          throw new Error("didn't a private key");
        }
      } catch (_error) {
        e = _error;
        err = e;
      }
      return [err, ret];
    };

    KeyMaterial.prototype.alloc_public_key = function(_arg, cb) {
      var err, progress_hook, _ref2;
      progress_hook = _arg.progress_hook;
      switch (this.rawkey.type) {
        case K.public_key_algorithms.RSA:
          _ref2 = rsa.RSA.alloc({
            pub: this.rawkey.pub
          }), err = _ref2[0], this.key = _ref2[1];
          break;
        default:
          err = new Error("unknown key type: " + this.rawkey.type);
      }
      return cb(err);
    };

    KeyMaterial.prototype.verify_self_sig = function(_arg, cb) {
      var body, err, progress_hook, type, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      progress_hook = _arg.progress_hook;
      body = this._self_sign_body();
      type = K.signatures.self_sign_key;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/kbpacket/keymaterial.iced",
          funcname: "KeyMaterial.verify_self_sig"
        });
        verify({
          key: _this.key,
          sig: _this.sig,
          body: body,
          type: type,
          progress_hook: progress_hook
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 126
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(err);
      });
    };

    KeyMaterial.prototype.unlock_private_key = function(_arg, cb) {
      var err, k, passphrase, progress_hook, raw, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      passphrase = _arg.passphrase, progress_hook = _arg.progress_hook;
      err = null;
      (function(__iced_k) {
        if ((k = _this.rawkey.priv) != null) {
          (function(__iced_k) {
            switch (k.encryption) {
              case K.key_encryption.triplesec_v1:
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/kbpacket/keymaterial.iced",
                    funcname: "KeyMaterial.unlock_private_key"
                  });
                  triplesec.decrypt({
                    key: passphrase,
                    data: k.data
                  }, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return raw = arguments[1];
                      };
                    })(),
                    lineno: 136
                  }));
                  __iced_deferrals._fulfill();
                })(__iced_k);
                break;
              case K.key_encryption.none:
                return __iced_k(raw = k.data);
              default:
                return __iced_k(err = new Error("Unknown key encryption type: " + k.encryption));
            }
          })(function() {
            return __iced_k(err == null ? err = _this.key.read_priv(raw) : void 0);
          });
        } else {
          return __iced_k();
        }
      })(function() {
        return cb(err);
      });
    };

    KeyMaterial.prototype.open = function(_arg, cb) {
      var err, esc, passphrase, progress_hook, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      passphrase = _arg.passphrase, progress_hook = _arg.progress_hook;
      esc = make_esc(cb, "KeyMaterial::esc");
      err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/kbpacket/keymaterial.iced",
          funcname: "KeyMaterial.open"
        });
        _this.alloc_public_key({
          progress_hook: progress_hook
        }, esc(__iced_deferrals.defer({
          lineno: 149
        })));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "src/kbpacket/keymaterial.iced",
            funcname: "KeyMaterial.open"
          });
          _this.verify_self_sig({
            progress_hook: progress_hook
          }, esc(__iced_deferrals.defer({
            lineno: 150
          })));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/kbpacket/keymaterial.iced",
              funcname: "KeyMaterial.open"
            });
            _this.unlock_private_key({
              passphrase: passphrase,
              progress_hook: progress_hook
            }, esc(__iced_deferrals.defer({
              lineno: 151
            })));
            __iced_deferrals._fulfill();
          })(function() {
            return cb(err);
          });
        });
      });
    };

    return KeyMaterial;

  })(Packet);

  exports.KeyMaterial = KeyMaterial;

}).call(this);
