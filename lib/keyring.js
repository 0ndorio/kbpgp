// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var KeyFetcher, PgpKeyRing,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };



  KeyFetcher = require('./keyfetch').KeyFetcher;

  PgpKeyRing = (function(_super) {
    __extends(PgpKeyRing, _super);

    function PgpKeyRing() {
      this._keys = {};
    }

    PgpKeyRing.prototype.add_key_manager = function(km) {
      var k, keys, _i, _len, _results;
      keys = km.export_pgp_keys_to_keyring();
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        k = keys[_i];
        console.log("I " + k.key_material.get_key_id().toString('base64'));
        _results.push(this._keys[k.key_material.get_key_id().toString('base64')] = k);
      }
      return _results;
    };

    PgpKeyRing.prototype.fetch = function(key_ids, ops, cb) {
      var err, i, id, k, ret, ret_i, _i, _len, _ref;
      ret = null;
      key_ids = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = key_ids.length; _i < _len; _i++) {
          k = key_ids[_i];
          _results.push(k.toString('base64'));
        }
        return _results;
      })();
      for (i = _i = 0, _len = key_ids.length; _i < _len; i = ++_i) {
        id = key_ids[i];
        if (!(ret == null)) {
          continue;
        }
        k = this._keys[id];
        if (k != null ? (_ref = k.key) != null ? _ref.can_perform(ops) : void 0 : void 0) {
          ret_i = i;
          ret = k;
        }
      }
      err = ret != null ? null : new Error("key not found: " + (JSON.stringify(key_ids)));
      return cb(err, ret, ret_i);
    };

    PgpKeyRing.prototype.lookup = function(key_id) {
      return this._keys[key_id];
    };

    return PgpKeyRing;

  })(KeyFetcher);

  exports.PgpKeyRing = PgpKeyRing;

}).call(this);
