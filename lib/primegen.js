// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var Avg, BigInteger, MS_RandomFountain, Montgomery, PrimeFinder, StrongRandomFountain, Timer, fermat2_test, fta, iced, miller_rabin, ms_random_word, ms_random_zn, native_rng, nbi, nbs, nbv, prime_search, prng, quickmod, random_prime, small_primes, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  _ref = require('openpgp').bigint, Montgomery = _ref.Montgomery, nbv = _ref.nbv, nbi = _ref.nbi, BigInteger = _ref.BigInteger;

  prng = require('triplesec').prng;

  native_rng = prng.native_rng;

  small_primes = require('./primes').small_primes;

  Timer = (function() {
    function Timer() {
      this.start = Date.now();
    }

    Timer.prototype.stop = function() {
      return Date.now() - this.start;
    };

    return Timer;

  })();

  Avg = (function() {
    function Avg() {
      this.tot = 0;
      this.n = 0;
    }

    Avg.prototype.start = function() {
      return this._t = Date.now();
    };

    Avg.prototype.stop = function() {
      var s;
      s = Date.now() - this._t;
      console.log("ran in " + s);
      this.tot += s;
      return this.n++;
    };

    Avg.prototype.avg = function() {
      return this.tot / this.n;
    };

    return Avg;

  })();

  nbs = function(s, base) {
    var r;
    if (base == null) {
      base = 10;
    }
    r = nbi();
    r.fromString(s, base);
    return r;
  };

  quickmod = function(p, d) {
    return p.modInt(d);
  };

  fta = new Avg();

  fermat2_test = function(n) {
    var bl, i, ret, t, _i;
    t = nbv(1);
    bl = n.bitLength();
    bl--;
    for (i = _i = bl; bl <= 0 ? _i <= 0 : _i >= 0; i = bl <= 0 ? ++_i : --_i) {
      t = t.modPowInt(2, n);
      if (n.testBit(i)) {
        t = t.shiftLeft(1);
      }
    }
    if (t.compareTo(n) > 0) {
      t = t.mod(n);
    }
    ret = t.compareTo(nbv(2)) === 0;
    return ret;
  };

  ms_random_word = function() {
    return native_rng(4).readUInt32BE(0);
  };

  MS_RandomFountain = (function() {
    function MS_RandomFountain() {}

    MS_RandomFountain.prototype.nextBytes = function(v) {
      var b, c, i, _i, _len, _results;
      b = native_rng(v.length);
      _results = [];
      for (i = _i = 0, _len = b.length; _i < _len; i = ++_i) {
        c = b[i];
        _results.push(v[i] = c);
      }
      return _results;
    };

    return MS_RandomFountain;

  })();

  ms_random_zn = function(rf, n) {
    var i;
    while (true) {
      i = new BigInteger(n.bitLength(), rf);
      if (i.compareTo(BigInteger.ONE) > 0 && i.compareTo(n) < 0) {
        return i;
      }
    }
  };

  miller_rabin = function(n, iter, progress_hook) {
    var a, i, iv, j, msrf, n1, r, s, y, _i, _j, _ref1;
    if (n.compareTo(BigInteger.ZERO) <= 0) {
      return false;
    }
    if (n.compareTo(nbv(7) <= 0)) {
      iv = n.intValue();
      return iv === 2 || iv === 3 || iv === 5 || iv === 7;
    }
    if (!n.testBit(0)) {
      return false;
    }
    n1 = n.subtract(BigInteger.ONE);
    s = n1.getLowestSetBit();
    r = n1.shiftRight(s);
    msrf = new MS_RandomFountain();
    for (i = _i = 0; 0 <= iter ? _i < iter : _i > iter; i = 0 <= iter ? ++_i : --_i) {
      if (typeof progress_hook === "function") {
        progress_hook({
          what: "mr",
          i: i,
          total: iter,
          p: n
        });
      }
      a = ms_random_zn(msrf, n);
      y = a.modPow(r, n);
      if (y.compareTo(BigInteger.ONE) !== 0) {
        for (j = _j = _ref1 = s - 1; _ref1 <= 0 ? _j <= 0 : _j >= 0; j = _ref1 <= 0 ? ++_j : --_j) {
          if (!(y.compareTo(n1) !== 0)) {
            continue;
          }
          if (j === 0) {
            return false;
          }
          y = y.square().mod(n);
          if (y.compareTo(BigInteger.ONE) === 0) {
            return false;
          }
        }
      }
    }
    if (typeof progress_hook === "function") {
      progress_hook({
        what: "mr",
        i: iter,
        total: iter,
        p: n
      });
    }
    return true;
  };

  PrimeFinder = (function() {
    function PrimeFinder(p, sieve) {
      this.p = p;
      this.sieve = sieve;
      this.inc = 0;
      this.maxinc = -1;
      this.sievepos = quickmod(this.p, this.sieve.length);
      this.calcmods();
    }

    PrimeFinder.prototype.getp = function() {
      return this.p;
    };

    PrimeFinder.prototype.setmax = function(i) {
      if (this.maxinc !== -1) {
        throw new Error("can only setmax() once");
      }
      return this.maxinc = i;
    };

    PrimeFinder.prototype.calcmods = function() {
      var sp;
      this.p = this.p.add(nbv(this.inc));
      if (this.maxinc !== -1) {
        this.maxinc -= this.inc;
      }
      this.inc = 0;
      return this.mods = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = small_primes.length; _i < _len; _i++) {
          sp = small_primes[_i];
          _results.push(quickmod(this.p, sp));
        }
        return _results;
      }).call(this);
    };

    PrimeFinder.prototype.decrement_mods_find_divisor = function() {
      var i, sp, _i, _len;
      for (i = _i = 0, _len = small_primes.length; _i < _len; i = ++_i) {
        sp = small_primes[i];
        while (this.mods[i] + this.inc >= sp) {
          this.mods[i] -= sp;
          if ((this.mods[i] + this.inc) === 0) {
            return true;
          }
        }
      }
      return false;
    };

    PrimeFinder.prototype.next_weak = function() {
      var step;
      while (true) {
        step = this.sieve[this.sievepos];
        this.sievepos = (this.sievepos + step) % this.sieve.length;
        this.inc += step;
        if (this.inc > this.maxinc && this.maxinc > 0) {
          this.tmp = nbv(0);
          return this.tmp;
        }
        if (this.inc < 0) {
          this.calcmods();
        }
        if (!this.decrement_mods_find_divisor()) {
          this.tmp = this.p.add(nbv(this.inc));
          return this.tmp;
        }
      }
    };

    PrimeFinder.prototype.next_fermat = function() {
      while (true) {
        this.next_weak();
        if (!this.tmp || fermat2_test(this.tmp)) {
          return this.tmp;
        }
      }
    };

    PrimeFinder.prototype.next_strong = function(iter) {
      if (iter == null) {
        iter = 32;
      }
      while (true) {
        this.next_weak();
        if (!this.tmp || (fermat2_test(this.tmp) && probab_prime(this.tmp, iter))) {
          return this.tmp;
        }
      }
    };

    return PrimeFinder;

  })();

  prime_search = function(_arg) {
    var i, iters, p, pf, pp, progress_hook, pvec, range, sieve, start, tmp;
    start = _arg.start, range = _arg.range, sieve = _arg.sieve, progress_hook = _arg.progress_hook, iters = _arg.iters;
    iters || (iters = 20);
    pf = new PrimeFinder(start, sieve);
    pf.setmax(range);
    pvec = ((function() {
      var _results;
      _results = [];
      while ((pp = pf.next_weak()).compareTo(BigInteger.ZERO) > 0) {
        _results.push(pp);
      }
      return _results;
    })());
    while (pvec.length) {
      i = ms_random_word() % pvec.length;
      p = pvec[i];
      if (typeof progress_hook === "function") {
        progress_hook({
          what: "fermat",
          p: p
        });
      }
      if (!fermat2_test(p)) {

      } else if (miller_rabin(p, iters, progress_hook)) {
        if (typeof progress_hook === "function") {
          progress_hook({
            what: "passed_mr",
            p: p
          });
        }
        return p;
      } else {
        if (typeof progress_hook === "function") {
          progress_hook({
            what: "failed_mr",
            p: p
          });
        }
      }
      tmp = pvec.pop();
      if (i < pvec.length) {
        pvec[i] = tmp;
      }
    }
    return nbv(0);
  };

  StrongRandomFountain = (function() {
    function StrongRandomFountain() {
      this.buf = null;
    }

    StrongRandomFountain.prototype.recharge = function(cb) {
      var tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/primegen.iced",
          funcname: "StrongRandomFountain.recharge"
        });
        prng.generate(Math.floor(7000 / 8), __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return tmp = arguments[0];
            };
          })(),
          lineno: 257
        }));
        __iced_deferrals._fulfill();
      })(function() {
        _this.buf = tmp.to_buffer();
        return cb();
      });
    };

    StrongRandomFountain.prototype.nextBytes = function(v) {
      var i, _i, _ref1;
      if (this.buf == null) {
        throw new Error("need a recharge!");
      }
      for (i = _i = 0, _ref1 = v.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        v[i] = this.buf[i];
      }
      return this.buf = null;
    };

    return StrongRandomFountain;

  })();

  random_prime = function(_arg, cb) {
    var e, go, i, iters, nbits, p, progress_hook, sieve, srf, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    nbits = _arg.nbits, iters = _arg.iters, progress_hook = _arg.progress_hook, e = _arg.e;
    srf = new StrongRandomFountain();
    sieve = [1, 2];
    go = true;
    i = 0;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!go) {
          return _break();
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/primegen.iced",
              funcname: "random_prime"
            });
            srf.recharge(__iced_deferrals.defer({
              lineno: 286
            }));
            __iced_deferrals._fulfill();
          })(function() {
            p = new BigInteger(nbits, srf);
            p = p.setBit(0).setBit(nbits - 1);
            return _next((e == null) || p.subtract(BigInteger.ONE).gcd(e).compareTo(BigInteger.ONE) === 0 ? (typeof progress_hook === "function" ? progress_hook({
              what: "guess",
              p: p
            }) : void 0, p = prime_search({
              start: p,
              range: nbits,
              sieve: sieve,
              progress_hook: progress_hook,
              iters: iters
            }), go = p.compareTo(BigInteger.ZERO) === 0) : void 0);
          });
        }
      };
      _while(__iced_k);
    })(function() {
      if (typeof progress_hook === "function") {
        progress_hook({
          what: "found",
          p: p
        });
      }
      return cb(p);
    });
  };

  exports.fermat2_test = fermat2_test;

  exports.nbs = nbs;

  exports.small_primes = small_primes;

  exports.miller_rabin = miller_rabin;

  exports.random_prime = random_prime;

}).call(this);
