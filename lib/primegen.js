// Generated by IcedCoffeeScript 1.6.3-g
(function() {
  var ASP, Avg, BigInteger, MediumRandomFountain, Montgomery, PrimeFinder, StrongRandomFountain, Timer, fermat2_test, fta, iced, make_esc, miller_rabin, ms_random_word, native_rng, nbi, nbs, nbv, prime_search, prng, quickmod, random_prime, random_zn, small_primes, _MR_inner, _MR_small_check, __iced_k, __iced_k_noop, _ref;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  _ref = require('openpgp').bigint, Montgomery = _ref.Montgomery, nbv = _ref.nbv, nbi = _ref.nbi, BigInteger = _ref.BigInteger;

  prng = require('triplesec').prng;

  native_rng = prng.native_rng;

  small_primes = require('./primes').small_primes;

  make_esc = require('iced-error').make_esc;

  ASP = require('./util').ASP;

  nbs = require('./bn').nbs;

  Timer = (function() {
    function Timer() {
      this.start = Date.now();
    }

    Timer.prototype.stop = function() {
      return Date.now() - this.start;
    };

    return Timer;

  })();

  Avg = (function() {
    function Avg() {
      this.tot = 0;
      this.n = 0;
    }

    Avg.prototype.start = function() {
      return this._t = Date.now();
    };

    Avg.prototype.stop = function() {
      var s;
      s = Date.now() - this._t;
      console.log("ran in " + s);
      this.tot += s;
      return this.n++;
    };

    Avg.prototype.avg = function() {
      return this.tot / this.n;
    };

    return Avg;

  })();

  quickmod = function(p, d) {
    return p.modInt(d);
  };

  fta = new Avg();

  fermat2_test = function(n) {
    var bl, i, ret, t, _i;
    t = nbv(1);
    bl = n.bitLength();
    bl--;
    for (i = _i = bl; bl <= 0 ? _i <= 0 : _i >= 0; i = bl <= 0 ? ++_i : --_i) {
      t = t.modPowInt(2, n);
      if (n.testBit(i)) {
        t = t.shiftLeft(1);
      }
    }
    if (t.compareTo(n) > 0) {
      t = t.mod(n);
    }
    ret = t.compareTo(nbv(2)) === 0;
    return ret;
  };

  ms_random_word = function() {
    return native_rng(4).readUInt32BE(0);
  };

  MediumRandomFountain = (function() {
    function MediumRandomFountain() {}

    MediumRandomFountain.prototype.nextBytes = function(v) {
      var b, c, i, _i, _len, _results;
      b = native_rng(v.length);
      _results = [];
      for (i = _i = 0, _len = b.length; _i < _len; i = ++_i) {
        c = b[i];
        _results.push(v[i] = c);
      }
      return _results;
    };

    return MediumRandomFountain;

  })();

  random_zn = function(rf, n) {
    var i;
    while (true) {
      i = new BigInteger(n.bitLength(), rf);
      if (i.compareTo(BigInteger.ONE) > 0 && i.compareTo(n) < 0) {
        return i;
      }
    }
  };

  _MR_inner = function(_arg) {
    var a, j, mrf, p, p1, r, s, y, _i, _ref1;
    mrf = _arg.mrf, s = _arg.s, r = _arg.r, p = _arg.p, p1 = _arg.p1;
    a = random_zn(mrf, p);
    y = a.modPow(r, p);
    if (y.compareTo(BigInteger.ONE) !== 0) {
      for (j = _i = _ref1 = s - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; j = _ref1 <= 0 ? ++_i : --_i) {
        if (!(y.compareTo(p1) !== 0)) {
          continue;
        }
        if (j === 0) {
          return false;
        }
        y = y.square().mod(p);
        if (y.compareTo(BigInteger.ONE) === 0) {
          return false;
        }
      }
    }
    return true;
  };

  _MR_small_check = function(_arg) {
    var p, _ref1;
    p = _arg.p;
    if (p.compareTo(BigInteger.ZERO) <= 0) {
      return false;
    } else if (p.compareTo(nbv(7) <= 0)) {
      return (_ref1 = p.intValue()) === 2 || _ref1 === 3 || _ref1 === 5 || _ref1 === 7;
    } else if (!p.testBit(0)) {
      return false;
    } else {
      return true;
    }
  };

  miller_rabin = function(_arg, cb) {
    var asp, esc, i, iter, mrf, p, p1, r, ret, s, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    p = _arg.p, iter = _arg.iter, asp = _arg.asp;
    asp || (asp = new ASP({}));
    iter || (iter = 10);
    esc = make_esc(cb, "miller_rabin");
    ret = _MR_small_check({
      p: p
    });
    (function(__iced_k) {
      if (ret) {
        p1 = p.subtract(BigInteger.ONE);
        s = p1.getLowestSetBit();
        r = p1.shiftRight(s);
        mrf = new MediumRandomFountain();
        ret = true;
        (function(__iced_k) {
          var _i, _results, _while;
          i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(i < iter)) {
              return _break();
            } else {

              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "src/primegen.iced",
                  funcname: "miller_rabin"
                });
                asp.progress({
                  what: "mr",
                  i: i,
                  total: iter,
                  p: p
                }, esc(__iced_deferrals.defer({
                  lineno: 146
                })));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (!_MR_inner({
                    mrf: mrf,
                    s: s,
                    r: r,
                    p: p,
                    p1: p1
                  })) {
                    ret = false;
                    (function(__iced_k) {
_break()
                    })(__iced_k);
                  } else {
                    return __iced_k();
                  }
                })(_next);
              });
            }
          };
          _while(__iced_k);
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/primegen.iced",
              funcname: "miller_rabin"
            });
            asp.progress({
              what: "mr",
              i: iter,
              total: iter,
              p: p
            }, esc(__iced_deferrals.defer({
              lineno: 151
            })));
            __iced_deferrals._fulfill();
          })(__iced_k);
        });
      } else {
        return __iced_k();
      }
    })(function() {
      return cb(null, ret);
    });
  };

  PrimeFinder = (function() {
    function PrimeFinder(p, sieve) {
      this.p = p;
      this.sieve = sieve;
      this.inc = 0;
      this.maxinc = -1;
      this.sievepos = quickmod(this.p, this.sieve.length);
      this.calcmods();
    }

    PrimeFinder.prototype.getp = function() {
      return this.p;
    };

    PrimeFinder.prototype.setmax = function(i) {
      if (this.maxinc !== -1) {
        throw new Error("can only setmax() once");
      }
      return this.maxinc = i;
    };

    PrimeFinder.prototype.calcmods = function() {
      var sp;
      this.p = this.p.add(nbv(this.inc));
      if (this.maxinc !== -1) {
        this.maxinc -= this.inc;
      }
      this.inc = 0;
      return this.mods = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = small_primes.length; _i < _len; _i++) {
          sp = small_primes[_i];
          _results.push(quickmod(this.p, sp));
        }
        return _results;
      }).call(this);
    };

    PrimeFinder.prototype.decrement_mods_find_divisor = function() {
      var i, sp, _i, _len;
      for (i = _i = 0, _len = small_primes.length; _i < _len; i = ++_i) {
        sp = small_primes[i];
        while (this.mods[i] + this.inc >= sp) {
          this.mods[i] -= sp;
          if ((this.mods[i] + this.inc) === 0) {
            return true;
          }
        }
      }
      return false;
    };

    PrimeFinder.prototype.next_weak = function() {
      var step;
      while (true) {
        step = this.sieve[this.sievepos];
        this.sievepos = (this.sievepos + step) % this.sieve.length;
        this.inc += step;
        if (this.inc > this.maxinc && this.maxinc > 0) {
          this.tmp = nbv(0);
          return this.tmp;
        }
        if (this.inc < 0) {
          this.calcmods();
        }
        if (!this.decrement_mods_find_divisor()) {
          this.tmp = this.p.add(nbv(this.inc));
          return this.tmp;
        }
      }
    };

    PrimeFinder.prototype.next_fermat = function() {
      while (true) {
        this.next_weak();
        if (!this.tmp || fermat2_test(this.tmp)) {
          return this.tmp;
        }
      }
    };

    PrimeFinder.prototype.next_strong = function(iter) {
      if (iter == null) {
        iter = 32;
      }
      while (true) {
        this.next_weak();
        if (!this.tmp || (fermat2_test(this.tmp) && probab_prime(this.tmp, iter))) {
          return this.tmp;
        }
      }
    };

    return PrimeFinder;

  })();

  prime_search = function(_arg, cb) {
    var asp, esc, i, is_prime, iters, p, pf, pp, pvec, range, ret, sieve, start, tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    start = _arg.start, range = _arg.range, sieve = _arg.sieve, asp = _arg.asp, iters = _arg.iters;
    iters || (iters = 20);
    pf = new PrimeFinder(start, sieve);
    pf.setmax(range);
    pvec = ((function() {
      var _results;
      _results = [];
      while ((pp = pf.next_weak()).compareTo(BigInteger.ZERO) > 0) {
        _results.push(pp);
      }
      return _results;
    })());
    esc = make_esc(cb, "prime_search");
    ret = null;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(pvec.length && (ret == null))) {
          return _break();
        } else {
          i = ms_random_word() % pvec.length;
          p = pvec[i];
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/primegen.iced",
              funcname: "prime_search"
            });
            asp.progress({
              what: "fermat",
              p: p
            }, esc(__iced_deferrals.defer({
              lineno: 250
            })));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              if (!fermat2_test(p)) {
                return __iced_k();
              } else {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/primegen.iced",
                    funcname: "prime_search"
                  });
                  miller_rabin({
                    p: p,
                    iters: iters,
                    asp: asp
                  }, esc(__iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        return is_prime = arguments[0];
                      };
                    })(),
                    lineno: 253
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/primegen.iced",
                      funcname: "prime_search"
                    });
                    asp.progress({
                      what: "passed_mr",
                      p: p
                    }, esc(__iced_deferrals.defer({
                      lineno: 254
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(is_prime ? ret = p : asp.progress({
                      what: "failed_mr",
                      p: p
                    }));
                  });
                });
              }
            })(function() {
              tmp = pvec.pop();
              return _next(i < pvec.length ? pvec[i] = tmp : void 0);
            });
          });
        }
      };
      _while(__iced_k);
    })(function() {
      if (ret == null) {
        ret = nbv(0);
      }
      return cb(null, ret);
    });
  };

  StrongRandomFountain = (function() {
    function StrongRandomFountain() {
      this.buf = null;
    }

    StrongRandomFountain.prototype.recharge = function(cb) {
      var tmp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/primegen.iced",
          funcname: "StrongRandomFountain.recharge"
        });
        prng.generate(Math.floor(7000 / 8), __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return tmp = arguments[0];
            };
          })(),
          lineno: 272
        }));
        __iced_deferrals._fulfill();
      })(function() {
        _this.buf = tmp.to_buffer();
        return cb();
      });
    };

    StrongRandomFountain.prototype.nextBytes = function(v) {
      var i, _i, _ref1;
      if (this.buf == null) {
        throw new Error("need a recharge!");
      }
      for (i = _i = 0, _ref1 = v.length; 0 <= _ref1 ? _i < _ref1 : _i > _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        v[i] = this.buf[i];
      }
      return this.buf = null;
    };

    return StrongRandomFountain;

  })();

  random_prime = function(_arg, cb) {
    var asp, e, esc, go, iters, nbits, p, range, sieve, srf, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    nbits = _arg.nbits, iters = _arg.iters, asp = _arg.asp, e = _arg.e;
    srf = new StrongRandomFountain();
    sieve = [1, 2];
    go = true;
    esc = make_esc(cb, "random_prime");
    range = nbits;
    p = null;
    (function(__iced_k) {
      var _results, _while;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          return iced.trampoline(function() {
            return _while(__iced_k);
          });
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!go) {
          return _break();
        } else {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "src/primegen.iced",
              funcname: "random_prime"
            });
            srf.recharge(__iced_deferrals.defer({
              lineno: 304
            }));
            __iced_deferrals._fulfill();
          })(function() {
            p = new BigInteger(nbits, srf);
            p = p.setBit(0).setBit(nbits - 1).setBit(nbits - 2);
            (function(__iced_k) {
              if ((e == null) || p.subtract(BigInteger.ONE).gcd(e).compareTo(BigInteger.ONE) === 0) {
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "src/primegen.iced",
                    funcname: "random_prime"
                  });
                  asp.progress({
                    what: "guess",
                    p: p
                  }, esc(__iced_deferrals.defer({
                    lineno: 308
                  })));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "src/primegen.iced",
                      funcname: "random_prime"
                    });
                    prime_search({
                      start: p,
                      range: range,
                      sieve: sieve,
                      asp: asp,
                      iters: iters
                    }, esc(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return p = arguments[0];
                        };
                      })(),
                      lineno: 309
                    })));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(go = (p == null) || (p.compareTo(BigInteger.ZERO) === 0));
                  });
                });
              } else {
                return __iced_k();
              }
            })(_next);
          });
        }
      };
      _while(__iced_k);
    })(function() {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/primegen.iced",
          funcname: "random_prime"
        });
        asp.progress({
          what: "found",
          p: p
        }, esc(__iced_deferrals.defer({
          lineno: 312
        })));
        __iced_deferrals._fulfill();
      })(function() {
        return cb(null, p);
      });
    });
  };

  exports.fermat2_test = fermat2_test;

  exports.nbs = nbs;

  exports.small_primes = small_primes;

  exports.miller_rabin = miller_rabin;

  exports.random_prime = random_prime;

  exports.random_zn = random_zn;

  exports.MediumRandomFountain = MediumRandomFountain;

  exports.StrongRandomFountain = StrongRandomFountain;

}).call(this);
